/**
@Author      Sudheer Kumar Basani
@name        CG_INT_AutoDecisioningAPI
@CreateDate  07/05/2020
@Description Apex class for Auto decision API request , response and API Error processing.
@Version     <1.0>
@reference 
*/
public with sharing class CG_INT_AutoDecisioningAPI {
    
    public static LLC_BI__Product_Package__c creditApp;
    public static Account acc;
    public static String apiName;
    private static ATHN_Application_Purpose__c appPurposeSetting;
    Map<String,Object> requestBodyMap=new Map<String,Object>();
    Id accId;
    List<LLC_BI__Pricing_Option__c> pricingList=new List<LLC_BI__Pricing_Option__c>();
    List<LLC_BI__Fee__c> feeList=new List<LLC_BI__Fee__c>();
    Map<Id,LLC_BI__Pricing_Option__c> facilityPricingMap=new Map<Id,LLC_BI__Pricing_Option__c>();
    Map<Id,LLC_BI__Fee__c> facilityFeeMap=new Map<Id,LLC_BI__Fee__c>();
    List<CG_Decision_History__c> decisionList=new List<CG_Decision_History__c>();
    List<LLC_BI__Loan__c> totalFacilityList=new List<LLC_BI__Loan__c>();
    List<LLC_BI__Loan__c> newFacilityList=new List<LLC_BI__Loan__c>();
    List<LLC_BI__Loan__c> existingFacilityList=new List<LLC_BI__Loan__c>();
    List<LLC_BI__Account_Collateral__c> accsecurityList=new List<LLC_BI__Account_Collateral__c>();
    List<LLC_BI__Collateral__c> existingsecurityList=new List<LLC_BI__Collateral__c>();
    List<LLC_BI__Connection__c> directorList=new List<LLC_BI__Connection__c>();
    Map<Id,LLC_BI__Connection__c> directorMap=new Map<Id,LLC_BI__Connection__c>();
    List<CG_Spreads__c> financialList=new List<CG_Spreads__c>();
    List<New_Collateral__c> newSecurityList=new List<New_Collateral__c>();
    List<ATHN_CG_Questionnaire__c> questionaireList=new List<ATHN_CG_Questionnaire__c>();
    List<CG_CAConnection__c> scriptList=new List<CG_CAConnection__c> ();
    List<CG_CAConnection__c> sfgScriptList=new List<CG_CAConnection__c> ();
    Map<Id,Boolean> directorConsetMap=new Map<Id,Boolean>();
    Map<Id,Boolean> directorFraudMap=new Map<Id,Boolean>();
    Map<String,Object> questionMap=new Map<String,Object>();
    List<String> mandatoryErrorList = new List<String>();
    Integer facCount,dirCount,existingSecCount,newSecCount,totalSecCount;
    String fraudSystemId;
    List<String> connectionRoleList=new List<String>{'Owner','Partner','Director','Guarantees','Official','Member','General Partner'};
        List<String> exposureRoleList=new List<String>{'Owner','Partner','Director','Guarantees','Member','General Partner'};
            Map<Id,LLC_BI__Collateral__c> childCollMap=new Map<Id,LLC_BI__Collateral__c>();
    Set<Id> isSupportedSet=new  Set<Id>();
    Set<Id> isSupportingSet=new  Set<Id>();
    Boolean isValidPurpose;
    Map<String,String> residentialStatusMap=new Map<String,String>{'1'=>'1','2'=>'2','3'=>'3','4'=>'4','5'=>'5'};
        Map<String,String> addressTypeMap=new Map<String,String>{'U'=>'U','N'=>'U','A'=>'B'};
    public static final String BPAL_OVERALL_REFER_MESSAGE = 'Please convert the application into a Full Credit application to proceed further ';
    public static final String Cross_and_Debenture='Cross Guarantee And Debenture';
    public static final String partialPayoff='Partial payoff';
    public static final String fullPayoff='Full payoff';
    public static final String salesFinance='Sales Finance';
            /**
*  Description    Method to get Credit application record details.
*  @name          getCreditAppDetails   
*  @param         String creditAppId
*  @return        void
*  @throws exception no
*/                
            public void getCreditAppDetails(String creditAppId){
                creditApp=[select id,Credit_Application_ID__c,Auto_Decision_Counter__c,Application_Entity__c,BusinessTargetterID__c,appRepCountPricing__c ,rePricingRequired__c,
                           LLC_BI__Account__c,Decision_System_ID__c,Application_Purpose__c,LegalStatus__c,Risk_Grade__c,BPAL_Limit__c,Is_Credit_Decision_Required__c,
                           Is_Fraud_Decision_Required__c,createddate,LLC_BI__Account__r.Refer_Stream__c,
                           Status__c, Proposed_Also_Secures_Value__c,RWM_Proposed__c,RWM_Golden_Source__c,
                           Secure_By_Sfg_Flag__c,isFacilitySFG__c,Date_of_Previous_CCR_Call__c,Date_of_Previous_Pricing_Call__c,Date_of_Previous_Decision_Call__c,
                           //Accountant Details
                           CG_AD_Organisation_Name__c,CG_AD_Contact_Name__c,CG_AD_Country__c,CG_AD_District__c,CG_AD_Flat__c,CG_AD_House_Name__c,CG_AD_House_Number__c,
                           CG_AD_Post_Code__c,CG_AD_Street__c,CG_AD_Town__c,CG_AD_Telephone_Number__c,CG_AD_Telephone_Type__c,
                           //Broker Details
                           CG_BD_Organisation_Name__c,Broker_Introduced__c,CG_BD_Contact_Name__c,CG_BD_Reference_Number__c,CG_BD_Country__c,CG_BD_District__c,CG_BD_Flat__c,CG_BD_House_Name__c,CG_BD_House_Number__c,
                           CG_BD_Post_Code__c,CG_BD_Street__c,CG_BD_Town__c,CG_BD_Telephone_Number__c,CG_BD_Telephone_Type__c,
                           //Solicitor Details
                           CG_SD_Organisation_Name__c,CG_SD_Contact_Name__c,CG_SD_DX_Number__c,CG_SD_Country__c,CG_SD_District__c,CG_SD_Flat__c,CG_SD_House_Name__c,CG_SD_House_Number__c,
                           CG_SD_Post_Code__c,CG_SD_Street__c,CG_SD_Town__c,CG_SD_Telephone_Number__c,CG_SD_Telephone_Type__c,
                           //Pricing Details                       
                           (Select id,Interest_type__c,Fixed_Interest_Rate_Term_years__c, LLC_BI__Loan__c  ,Discretion_Margin_Rate__c   
                            from Pricing_Options_PP__r),
                           (Select Name,LLC_BI__Amount__c, LLC_BI__Stage__c,LLC_BI__Term_Months__c,Renewal_Date__c,LLC_BI__Is_Secured__c,SFG_Required__c,Action__c,
                            LLC_BI__Is_Modification__c,Frequency__c,LLC_BI__Interest_Rate_Adjustment_Frequency__c,Facility_Purpose__c,Sort_Code__c,Account_Number__c,
                            Is_Discretion_Product_Fee_Beyond_Limit__c,Is_Discretion_MarginRate_Beyond_Limit__c,LLC_BI__Principal_Balance__c,Undrawn_Amount__c,
                            LLC_BI__Amortized_Term_Months__c,Capital_Repayment_Holiday__c,Full_Repayment_Holiday_Months__c,LLC_BI__Product__c ,XR_third_party_collateral_attestation__c,
                            LLC_BI__Product_Reference__r.Product_Code__c,LLC_BI__Product_Reference__r.Repayment_Profile_Required__c,LLC_BI__Product_Type__c,
                            LLC_BI__Product_Reference__r.Overlay_Type__c,LLC_BI__Product_Reference__r.Product_Grouping__c,
                            LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.Product_Type_Code__c,
                            LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.LLC_BI__Product_Line__r.Product_Line_Code__c,  Send_to_Pricing_Helpdesk__c from
                            LLC_BI__Loan_Facilities__r where LLC_BI__Stage__c!='Complete' and LLC_BI__Product_Reference__c!=null),  
                           //Fee Details
                           (select id,LLC_BI__Loan__c,Add_Fee_To_Loan__c,Discretion_Product_Fee__c from Fees_PP__r),
                           //New Collateral Details
                           (select id,Name,Collateral_Type_NC__c,RDS_Collateral_Code__c,Value_NC__c,Prior_Charges_NC__c,Charge_Priority_NC__c,Is_Supported_NC__c,
                            Supports_Guarantee_NC__c,Record_Complete_NC__c,Collateral_Status__c,
                            Address_line_1__c,Address_line_2__c,Address_line_3__c,Address_line_4__c,Address_line_5__c,Address_line_6__c,Post_Code_NC__c,Collateral_Subtype_NC__c
                            from New_Collaterals__r),
                           //Decision History Details
                           (select id,Fraud_SystemId__c,eBDR_reference__c,Auto_Decision_Overall_New__c from Decision_Histories__r),
                           // Questionaire QI,ILC
                           (Select id,Name,Product_Package__r.name,SupportApp__c,ShareholderChg__c,TaxArrears__c,IsdebtorBkFunding__c,withinBBMSLimit__c,riskGuidelinesMet__c,securityScrnConfirmed__c,withinOpCo__c,
                            I_confirm_ALL_ILC_conditions_are_met__c,
                            MCOB_Outcome__c,Facility__c,ILCApplicable__c,Facility__r.LLC_BI__Stage__c
                            from  CAQIs__r ),
                           // SFG Scripts
                           (SELECT Id,Is_a_short_form_guarantee_suitable__c,Product_Package__c,Connection_Role__c,Connection__c,Connected_Organisation__c,Organisation__c,
                            Type_of_Script__c,Name ,Agreed_by_customer_Bureau__c,Agreed_by_customer_Fraud_GDPR__c,Agreed_by_customer__c,Agreed_by_Customer_PersonalReattestation__c                    
                            FROM CG_CAConnections__r )
                           
                           from LLC_BI__Product_Package__c
                           where Id=:creditAppId];
                
            }
    /**
*  Description    Method to get Account record details.
*  @name          getAccountDetails   
*  @param         String accId,String creditAppId
*  @return        void
*  @throws exception no
*/
    public void getAccountDetails(String accId,String creditAppId){
        
        // query all the facilicilitres,  directors/connections , spreads, securities, exposure details using account id      
        acc=[select id,Customer_ID__c,Registered_Name__c,Type,BIC_Code__c,BTA_Code__c,Refer_Stream__c,Client_Acquisition_Date__c,
             Name,Company_Registration_Number__c,Phone__c,Business_Start_Date__c,Email_address_for_main_principal_contact__c,Address_Type_Current_Address__c,
             Mobile__c,
             //Registered address
             Add_line_1__c,Add_line_2__c,Add_line_3__c,Add_line_4__c,Add_line_5__c,Add_line_6__c,Post_Code__c,Country__c,
             //Trading Address
             Trading_Address_Line_1__c,Trading_Address_Line_2__c,Trading_Address_Line_3__c,
             Trading_Address_Line_4__c,Trading_Address_Line_5__c,Trading_Address_Line_6__c,Trading_Post_Code__c,
             //Correspondence Address
             Correspondence_Add_line_1__c,Correspondence_Add_line_2__c,Correspondence_Add_line_3__c,Correspondence_Add_line_4__c,
             Correspondence_Add_line_5__c,Correspondence_Add_line_6__c,Correspondence_Post_Code__c,
             //also secure value
             Also_Secures_Value__c,Also_Secures_Value_Customer_ID__c,
             // Direct Exposuure
             Aggregated_OD_limits_going_forward_expos__c,Aggregated_secured_loans_going_forward_e__c,Aggregated_unsecured_loans_going_forward__c,
             Aggregated_Total_going_forward_exposure__c,Aggregated_going_forward_primary_exposur__c,Aggregated_going_forward_Trading_exposur__c,Aggregated_going_forward_settlement_expo__c,Aggregated_incremental_primary_exposure__c,
             Aggregated_incremental_Trading_exposure__c,Aggregated_incremental_settlement_exposu__c,Aggregated_existing_primary_exposure__c,Aggregated_existing_Trading_exposure__c,Aggregated_existing_settlement_exposure__c,Aggregated_OD_existing_exposure__c,Aggregated_Loans_existing_exposure__c,
             Aggregated_AssetFinance_existing_exposur__c,Aggregated_salesfinance_existing_exposur__c,Aggregated_total_existing_exposure__c,
             //Connected Exposuure
             Total_Connected_Loan_Exposure__c,Total_Connected_Mortgage_Exposure__c,Total_Connected_Overdraft_Exposure__c,Total_Connected_Settlement_Exposure__c,
             Total_Connected_Asset_Finance_Exposure__c,Total_Connected_Sales_Finance_Exposure__c,Total_Connected_Other_Exposure__c,
             Total_Connected_SFET_Settlement_Exposure__c,Connected_Business_Total_Exposure__c,
             // existing facilities
             (select id,Name,LLC_BI__Amount__c,LLC_BI__Stage__c,LLC_BI__Term_Months__c,Renewal_Date__c,LLC_BI__Is_Secured__c,SFG_Required__c,LLC_BI__Is_Modification__c,
              LLC_BI__Interest_Rate_Adjustment_Frequency__c,Frequency__c,LLC_BI__Amortized_Term_Months__c,Capital_Repayment_Holiday__c,Full_Repayment_Holiday_Months__c,
              Facility_Purpose__c,Sort_Code__c,Account_Number__c,LLC_BI__Principal_Balance__c,Undrawn_Amount__c,Action__c,LLC_BI__Product__c ,
              LLC_BI__Product_Reference__r.Product_Code__c,LLC_BI__Product_Reference__r.Overlay_Type__c,LLC_BI__Product_Reference__r.Product_Grouping__c,
              LLC_BI__Product_Reference__r.Repayment_Profile_Required__c,
              LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.Product_Type_Code__c,
              LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.LLC_BI__Product_Line__r.Product_Line_Code__c ,LLC_BI__Product_Type__c    
              from LLC_BI__Loans__r where  LLC_BI__Stage__c='Booked' AND LLC_BI__Product_Package__c!=:creditAppId  ),
             // Existing Securities
             (select id,LLC_BI__Collateral__r.Name,LLC_BI__Collateral__r.id,LLC_BI__Collateral__r.Charge_ID__c,LLC_BI__Collateral__r.RDS_Collateral_Code_New__c,
              LLC_BI__Collateral__r.LLC_BI__Collateral_Type__r.LLC_BI__Type__c, LLC_BI__Collateral__r.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c,
              LLC_BI__Collateral__r.Release_Security_New__c,LLC_BI__Collateral__r.LLC_BI__Value__c,LLC_BI__Collateral__r.Proposed_Value__c,LLC_BI__Collateral__r.Prior_Charges__c,
              LLC_BI__Collateral__r.Supports_Guarantee__c,LLC_BI__Collateral__r.Supported__c,
              LLC_BI__Collateral__r.Collateral_Status__c,
              LLC_BI__Collateral__r.LLC_BI__Highest__c,LLC_BI__Collateral__r.LLC_BI__Parent_Collateral__c,LLC_BI__Collateral__r.LLC_BI__Parent_Collateral__r.id,
              LLC_BI__Collateral__r.Charge_Priority__c,LLC_BI__Collateral__r.Proposed_Charge_Priority__c,
              LLC_BI__Collateral__r.Address_line_1__c, LLC_BI__Collateral__r.Address_line_2__c,LLC_BI__Collateral__r.Address_line_3__c,
              LLC_BI__Collateral__r.Address_line_4__c,LLC_BI__Collateral__r.Address_line_5__c,LLC_BI__Collateral__r.Address_line_6__c,
              LLC_BI__Collateral__r.Post_Code__c,LLC_BI__Collateral__r.Proposed_Release_security__c,LLC_BI__Collateral__r.Proposed_Prior_charges__c,LLC_BI__Collateral__r.Proposed_Collateral_Type__c,LLC_BI__Collateral__r.Proposed_Collateral_SubType__c,LLC_BI__Collateral__r.Proposed_Collateral_status__c,
              LLC_BI__Collateral__r.Proposed_Address_Line_6__c,LLC_BI__Collateral__r.Proposed_Address_line_5__c,LLC_BI__Collateral__r.Proposed_Address_line_4__c,LLC_BI__Collateral__r.Proposed_Address_line_3__c,LLC_BI__Collateral__r.Proposed_Address_line_2__c,LLC_BI__Collateral__r.Proposed_Address_line_1__c,LLC_BI__Collateral__r.Proposed_Post_Code__c,
              LLC_BI__Collateral__r.LLC_BI__Depth__c,Party_Relationship__c
              from LLC_BI__Account_Collateral__r where LLC_BI__Collateral__r.LLC_BI__Parent_Collateral__c=null ),
             // Spreads
             (select id,Statement_Period_Date__c,Interest_Paid_Loans_HP_O_D_s__c,FormSevicingSurplus__c,Short_Term_Loans_HP__c,
              Net_profit_after_Interest_before_Tax__c from Spreads__r),
             
             //Connectioons
             (select id,LLC_BI__Connected_From__c,LLC_BI__Connected_To__c,LLC_BI__Connected_To__r.Name,LLC_BI__Connected_To__r.Customer_ID__c,
              LLC_BI__Connected_To__r.First_Name__c,LLC_BI__Connected_To__r.Last_Name__c,
              LLC_BI__Connected_To__r.Mobile__c,LLC_BI__Connected_To__r.Date_of_Birth__c,
              LLC_BI__Connected_To__r.BTA_Code__c,LLC_BI__Connection_Role__c,LLC_BI__Connection_Role__r.name 
              from LLC_BI__Connected_To__r where LLC_BI__Connection_Role__r.name IN :connectionRoleList)
             from Account where id=:accId];
        
    }
    /**
*  Description    Method to get ATHN_CG_Questionnaire__c record details.
*  @name          getQuestionnaireMap   
*  @param         List<ATHN_CG_Questionnaire__c> questionaireList,List<CG_CAConnection__c> sfgScriptList
*  @return        Map<String,Object>
*  @throws exception no
*/
    public Map<String,Object> getQuestionnaireMap(List<ATHN_CG_Questionnaire__c> questionaireList,List<CG_CAConnection__c> sfgScriptList ){
        Map<String,Object> questionnaireMap=new Map<String,Object>();
        Boolean ilcApplicable=false;
        Boolean isQIAvailable=false;
        List<String> qiAppPurposeList=new List<String>{'1A','1B','2A','9A'};// CB108 chnages
            for(ATHN_CG_Questionnaire__c singleQuestion: questionaireList){
                String ilcOrQI;
                ilcOrQI=singleQuestion.name;
                if(ilcOrQI.startsWith('QI-')){
                    isQIAvailable=true;
                    if(singleQuestion.SupportApp__c!= null) {
                        questionnaireMap.put('Q01',singleQuestion.SupportApp__c);
                    }
                    if(singleQuestion.SupportApp__c=='Yes'){ //GRPCONLEND-21238
                        if(singleQuestion.ShareholderChg__c!= null) {
                            questionnaireMap.put('Q02',singleQuestion.ShareholderChg__c);
                        }
                        if(singleQuestion.TaxArrears__c!= null) {
                            questionnaireMap.put('Q03',singleQuestion.TaxArrears__c);
                        }
                        if(singleQuestion.IsdebtorBkFunding__c!= null) {
                            questionnaireMap.put('Q04',singleQuestion.IsdebtorBkFunding__c);
                        }
                        if(creditApp.Application_Purpose__c!='2A'&&singleQuestion.withinBBMSLimit__c!= null) {
                            questionnaireMap.put('Q05',singleQuestion.withinBBMSLimit__c); //non BPAL
                        }
                        if(singleQuestion.riskGuidelinesMet__c!= null) {
                            questionnaireMap.put('Q06',singleQuestion.riskGuidelinesMet__c);
                        }
                        if(singleQuestion.securityScrnConfirmed__c!= null) {
                            questionnaireMap.put('Q07',singleQuestion.securityScrnConfirmed__c);
                        }
                        if(creditApp.Application_Purpose__c!='2A'&&singleQuestion.withinOpCo__c!= null) {
                            questionnaireMap.put('Q08',singleQuestion.withinOpCo__c); // non BPAL
                        }
                        if(creditApp.Application_Purpose__c!='2A'&&singleQuestion.withinOpCo__c== null){ //GRPCONLEND-21238
                            isQIAvailable=false;
                        }
                        if(creditApp.Application_Purpose__c!='2A'&&singleQuestion.ILCApplicable__c=='Yes') {  //non BPAL
                            ilcApplicable=true;
                        }
                    }
                }
                
                   else if(ilcOrQI.startsWith('ILC-') && singleQuestion.I_confirm_ALL_ILC_conditions_are_met__c!= null) {
                        questionnaireMap.put('I01',singleQuestion.I_confirm_ALL_ILC_conditions_are_met__c);
                    }
               
            }
        
        
        if(sfgScriptList.size()>0 && sfgScriptList[0].Is_a_short_form_guarantee_suitable__c!= null) {
            questionnaireMap.put('S01',sfgScriptList[0].Is_a_short_form_guarantee_suitable__c);
        }
        
        
        // sfg flag logic this is mandatory
        if(apiName=='lendingDecisions'){ 
            
            if(ilcApplicable&&!questionnaireMap.containsKey('I01') ){
                mandatoryErrorList.add('ILC Questionnaire is required');
            }
            if(isQIAvailable==false&&qiAppPurposeList.contains(creditApp.Application_Purpose__c)){ // update as per CB108
                mandatoryErrorList.add('QI Questionnaire is required');
            }
        }
        return questionnaireMap;
    }
    /**
*  Description    Method to get MCOBFacilityMap record details.
*  @name          getMCOBFacilityMap   
*  @param         List<ATHN_CG_Questionnaire__c> questionaireList
*  @return        Map<Id,String>
*  @throws exception no
*/
    public Map<Id,String> getMCOBFacilityMap(List<ATHN_CG_Questionnaire__c> questionaireList){
        Map<Id,String> mcobQuestionnaireMap=new Map<Id,String>();
        String mcobIndicator;
        for(ATHN_CG_Questionnaire__c singleQuestion: questionaireList){
            String ilcOrQI;
            ilcOrQI=singleQuestion.name;
            if(ilcOrQI.startsWith('QI-') || ilcOrQI.startsWith('ILC-')){
                
                // do nothing
            }
            
            else{
                if(singleQuestion.Facility__c!=null&&singleQuestion.MCOB_Outcome__c!=null && singleQuestion.Facility__r.LLC_BI__Stage__c !='Complete'){
                    if(singleQuestion.MCOB_Outcome__c=='MCOB regulated') {
                        mcobIndicator='Y';
                    }
                    else if(singleQuestion.MCOB_Outcome__c=='Not MCOB regulated'){
                        mcobIndicator='N';
                    }
                    else if(singleQuestion.MCOB_Outcome__c=='Out of scope of MCOB'){
                        mcobIndicator='X';
                    }
                    mcobQuestionnaireMap.put(singleQuestion.Facility__c,mcobIndicator);
                }
            }
        }
        
        return mcobQuestionnaireMap;
    }
    /**
*  Description    Method to update business targetter details on product package record
*  @name          updateBTDetails   
*  @param         List<ATHN_CG_Questionnaire__c> questionaireList
*  @return        Map<Id,String>
*  @throws exception Yes
*/
    public Boolean updateBTDetails(String creditAppId,String btCode,String legalStatus){
        LLC_BI__Product_Package__c updateCA=new LLC_BI__Product_Package__c();
        updateCA.id=creditAppId;
        if(legalStatus!='Yes'){
        updateCA.LegalStatus__c=legalStatus;
        updateCA.BusinessTargetterID__c=btCode;
        updateCA.Date_of_Previous_BT_Call__c=datetime.now(); //GRPCONLEND-21349
         }
        else{
           updateCA.LegalStatus__c=getLegalStatusFromBTA(creditAppId);  
        }
      try{
            if(updateCA.LegalStatus__c!=null){
                update updateCA;
                return true;
            }
            else{
                return false;
            }
        }
        catch(Exception e){
            return false;
        }
        
    }
    /**
*  Description    Method to create Pricing decision HTTP request.
*  @name          constructPricingDecisionRequest   
*  @param         String creditAppId,String bbApiName,String btCode,String legalStatus
*  @return        Map<String,Object>
*  @throws exception No
*/
    public Map<String,Object> constructPricingDecisionRequest(String creditAppId,String bbApiName,String btCode,String legalStatus){
        String businessTargetterCode,requestBody,typeName,btaLegalStatus;
        Integer totalSecCount=0;
        Map<Id,String> mcobFacMap=new  Map<Id,String>();
        Map<Id,LLC_BI__Collateral__c> mainCollMap=new Map<Id,LLC_BI__Collateral__c>();
        Set<Id> mainCollSet=new  Set<Id>();
        Set<Id> gaCollSet=new  Set<Id>();
        Map<Id,New_Collateral__c> newCollMap=new Map<Id,New_Collateral__c>();
        Set<Id> ga2CollSet=new  Set<Id>();
        Set<String> indContactId=new  Set<String>();
        Map<String,Contact> indContactMap=new  Map<String,Contact> ();
        Boolean isValidPurpose;
        Set<Id> modifiedLoanIdSet = new Set<Id>();
        Set<Id> sfgLoanIdSet = new Set<Id>();
        Map<Id,Decimal> sfgNewLoanIdAmountMap =new Map<Id,Decimal>();
        Set<Id> modifiedParentLoanIdSet = new Set<Id>();
        Boolean isCAMCOBreg=false;
        Boolean isCAOutOfScopeMCOB=false;
        Boolean   isConsentScriptAvailable=false;
        List<String> consentScriptReqList=new List<String>{'1A','1B','2A'};
            Boolean isPricingAPiCalled=true;
        Boolean isRepricingRequired=false;
        Boolean isPricingCallAllowed=false;
        Boolean isDecisionCallAllowed=false;
        Boolean isSendToPricingHelpDeskChecked=false;
        Boolean isPricingDecisionCallOver30days=false; //added for GRPCONLEND-21082
        Boolean isConsentScriptReAttestationAvailable=false; // added for GRPCONLEND-21082
        Boolean isBPALOverallAutoDecisionRefer=false; // added for GRPCONLEND-22454
        apiName=bbApiName;
        List<String> relationshipList=new List<String>{CG_Constants.PRINCIPAL_DEBTOR,CG_Constants.PRINCIPAL_DEBTOR_AND_GUARANTOR,CG_Constants.PRINCIPAL_DEBTOR_AND_INTEREST_HOLDER};//Added for GRPCONLEND-21118
        
      
        getCreditAppDetails(creditAppId);
        if(creditApp!=null){
            accId=creditApp.LLC_BI__Account__c;
            pricingList=creditApp.Pricing_Options_PP__r;
            newFacilityList=creditApp.LLC_BI__Loan_Facilities__r;
            feeList=creditApp.Fees_PP__r;
            decisionList=creditApp.Decision_Histories__r;
            newSecurityList=creditApp.New_Collaterals__r;
            questionaireList=creditApp.CAQIs__r;
            scriptList=creditApp.CG_CAConnections__r;
            businessTargetterCode=creditApp.BusinessTargetterID__c;
            btaLegalStatus=creditApp.LegalStatus__c;
            //added below as part of fix for GRPCONLEND-21082,GRPCONLEND-24056
            if(((creditApp.Status__c == CG_Constants.STATUS_PENDING || creditApp.Status__c == CG_Constants.CA_STATUS_AUTO_DECISION) && creditApp.Date_of_Previous_Pricing_Call__c != null && creditApp.Date_of_Previous_Pricing_Call__c < datetime.now() - 30) ||
               (creditApp.Date_of_Previous_Decision_Call__c == null &&  creditApp.Date_of_Previous_Pricing_Call__c < datetime.now() - 30)){
                   isPricingDecisionCallOver30days = true;
               }
            //added below as part of fix for GRPCONLEND-22454
            if(creditApp.Application_Purpose__c == CG_Constants.BPAL_APP_PURPOSE && creditApp.Date_of_Previous_Pricing_Call__c != null 
               && decisionList[0].Auto_Decision_Overall_New__c =='Refer'){
                    isBPALOverallAutoDecisionRefer = true;
            }
            
        }
        
        for(LLC_BI__Loan__c loan:newFacilityList){
            if(loan.LLC_BI__Stage__c!='Booked'){
                if(loan.SFG_Required__c==true){
                    sfgLoanIdSet.add(loan.id);
                    //GRPCONLEND-21691 SFG collateral block to be sent if facility is secured by SFG
                    if(loan.LLC_BI__Amount__c!=null){
                        sfgNewLoanIdAmountMap.put(loan.id,loan.LLC_BI__Amount__c);
                    }
                }
                if(loan.LLC_BI__Is_Modification__c==true){
                    modifiedLoanIdSet.add(loan.id);
                }
                if(loan.Send_to_Pricing_Helpdesk__c==true){
                    isSendToPricingHelpDeskChecked=true;
                }
            }
        }
        if(modifiedLoanIdSet.size()>0){
            for(LLC_BI__LoanRenewal__c modLoan : [Select id,LLC_BI__RenewalLoanId__c,LLC_BI__ParentLoanId__c from LLC_BI__LoanRenewal__c where LLC_BI__RenewalLoanId__c=:modifiedLoanIdSet ]){
                if(modLoan.LLC_BI__ParentLoanId__c!=null) {
                    modifiedParentLoanIdSet.add(modLoan.LLC_BI__ParentLoanId__c);
                }
            }
        }
        if(questionaireList!=null && questionaireList.size()>0){
            mcobFacMap=getMCOBFacilityMap(questionaireList);
        }
        for(CG_CAConnection__c script:scriptList){
            if( script.Type_of_Script__c=='SFG'&&script.Connection__c!=null){ //GRPCONLEND-22461 null check added 
                sfgScriptList.add(script);
            }
            else  if( script.Type_of_Script__c=='Consent Script'&&script.Connection__c!=null){
                if(script.Agreed_by_customer_Bureau__c ||script.Agreed_by_customer_Fraud_GDPR__c){
                    isConsentScriptAvailable=true;
                }
                //added below as part of fix for GRPCONLEND-21082
                if(script.Agreed_by_Customer_PersonalReattestation__c){
                    isConsentScriptReAttestationAvailable=true;
                }
                directorConsetMap.put(script.Connected_Organisation__c,script.Agreed_by_customer_Bureau__c);
                directorFraudMap.put(script.Connected_Organisation__c,script.Agreed_by_customer_Fraud_GDPR__c);
            }
            else if(script.Type_of_Script__c=='MCOB Regulated Lending'&&script.Agreed_by_customer__c==true){
                isCAMCOBreg=true;
            }
            else if(script.Type_of_Script__c=='Out of scope of MCOB'&&script.Agreed_by_customer__c==true){
                isCAOutOfScopeMCOB=true;
            }
        }
        
        getAccountDetails(accId,creditAppId); 
        appPurposeSetting=CG_INT_Validations.getApplicationPurpose(creditApp.Application_Purpose__c);
        
        
        if(creditApp.Application_Purpose__c!=null&&appPurposeSetting!=null){
            String isBureauFlag=(appPurposeSetting.isBureau__c?'Y':'N');
            String isFraudFlag=(appPurposeSetting.isFraud__c?'Y':'N');
            if(apiName=='lendingPrices'){ 
                typeName='GetQuote';
                isValidPurpose=appPurposeSetting.isPricing__c;
                isPricingCallAllowed=CG_CMP_CMPService.userGroupSetting.Calculate_Pricing__c;
                
            }
            else if(apiName=='lendingDecisions'){
                typeName='GetDecision';
                isValidPurpose=appPurposeSetting.isDecision__c;
                if(creditApp.Decision_System_ID__c!=null){
                    isPricingAPiCalled = true;
                }else{
                    isPricingAPiCalled = false;
                }
                isRepricingRequired=creditApp.rePricingRequired__c;
                if(creditApp.Application_Entity__c=='BUK'){
                    isDecisionCallAllowed=CG_CMP_CMPService.userGroupSetting.AutoDecision_BUK__c;
                }
                else if(creditApp.Application_Entity__c=='Cross Referral'){     
                    isDecisionCallAllowed=CG_CMP_CMPService.userGroupSetting.AutoDecision_XR__c;
                }
                //Added for BUKBBSF-29481
               if(creditApp.RWM_Golden_Source__c ==null && creditApp.RWM_Proposed__c==null){
               mandatoryErrorList.add(System.label.RWM_Proposed_Golden_AutoDecision_Error);
               }
            else if(creditApp.RWM_Golden_Source__c ==null){
               mandatoryErrorList.add(System.label.RWM_Golden_Source_AutoDecision_Error);
               } 
            else if(creditApp.RWM_Proposed__c ==null){
               mandatoryErrorList.add(System.label.RWM_Proposed_AutoDecision_Error);
               } 
                
            }
            if(isPricingCallAllowed||isDecisionCallAllowed){
                if(isValidPurpose&&(isPricingAPiCalled)&&!isRepricingRequired&&
                   (creditApp.Date_of_Previous_CCR_Call__c!=null ||
                    creditApp.Application_Purpose__c=='1A')){
                         if(btaLegalStatus!=null||businessTargetterCode!=null || (btCode!=null&& btCode=='Yes') ){  
                            
                            for(LLC_BI__Pricing_Option__c po:pricingList){
                                facilityPricingMap.put(po.LLC_BI__Loan__c,po);
                            }
                            for(LLC_BI__Fee__c fee:feeList){
                                facilityFeeMap.put(fee.LLC_BI__Loan__c,fee);
                            }
                            
                            if(acc!=null){
                                existingFacilityList=acc.LLC_BI__Loans__r;
                                accsecurityList=acc.LLC_BI__Account_Collateral__r;
                                financialList=acc.Spreads__r;
                                directorList=acc.LLC_BI__Connected_To__r;
                            }
                            for(LLC_BI__Connection__c dir: directorList){
                                directorMap.put(dir.LLC_BI__Connected_To__c,dir);
                                if(dir.LLC_BI__Connected_To__r.Customer_ID__c!=null){
                                    indContactId.add(dir.LLC_BI__Connected_To__r.Customer_ID__c);
                                }
                            }
                            if(directorList!=null&& !directorList.isEmpty()&&isConsentScriptAvailable==false&&consentScriptReqList.contains(creditApp.Application_Purpose__c)){
                                mandatoryErrorList.add('Please read out the Personal data script to the customer.');
                            }
                            
                            //added below if for GRPCONLEND-21082
                            if(isPricingDecisionCallOver30days == true && isConsentScriptReAttestationAvailable==false && consentScriptReqList.contains(creditApp.Application_Purpose__c)){
                                mandatoryErrorList.add('Please click on Retrieve Customer Data button.'+ 
                                                       + 'Also, capture the consent again on the Personal data script screen and click the Calculate Pricing button.'
                                                       + 'Please refer to the Scripts – SDS for further details.');
                            }
                            if(isSendToPricingHelpDeskChecked){
                                mandatoryErrorList.add('Refer to Pricing helpdesk checkbox should be unchecked for all the facilities in the application');
                            }
                            //added for GRPCONLEND-22454
                            if(isBPALOverallAutoDecisionRefer){
                                mandatoryErrorList.add(BPAL_OVERALL_REFER_MESSAGE);
                            }
                            if(indContactId.size()>0){
                                for(Contact con:[select id,contact_Id__c,customer_Id__c,account.customer_Id__c,Title,FirstName,LastName,MiddleName,Salutation,
                                                 Phone,MobilePhone,HomePhone,Email_Address__c,Gender__c,Birthdate,BTA_Code__c,
                                                 Address_Line_1__c,Address_Line_2__c,Address_Line_3__c,Address_Line_4__c,Address_Line_5__c,Address_Line_6__c,
                                                 Post_Code__c,Contact_Address_Start_Date__c,Contact_Address_End_Date__c,Contact_Current_Address_Country__c,
                                                 Contact_Current_Residential_Status__c,Address_Type_Current_Address__c
                                                 from contact where contact_Id__c IN:indContactId]){
                                                     indContactMap.put(con.contact_id__c,con); 
                                                     
                                                 } }
                            for(LLC_BI__Account_Collateral__c acoll:accsecurityList){
                                //if condition added as part of GRPCONLEND-21118
                                if(relationshipList.contains(acoll.Party_Relationship__c)){
                                existingsecurityList.add(acoll.LLC_BI__Collateral__r);
                                
                                mainCollMap.put(acoll.LLC_BI__Collateral__r.id,acoll.LLC_BI__Collateral__r);
                                mainCollSet.add(acoll.LLC_BI__Collateral__r.id);
                                if(acoll.LLC_BI__Collateral__r.LLC_BI__Collateral_Type__r.LLC_BI__Type__c=='Guarantee'||
                                   acoll.LLC_BI__Collateral__r.LLC_BI__Collateral_Type__r.LLC_BI__Type__c==Cross_and_Debenture){
                                       gaCollSet.add(acoll.LLC_BI__Collateral__r.id); //    Cross Guarantee And Debenture
                                   }
                                
                            }
                            }
                            
                            
                            for(New_Collateral__c ncoll:newSecurityList){
                                
                                newCollMap.put(ncoll.id,ncoll);
                                if(ncoll.Collateral_Type_NC__c=='Guarantee'||ncoll.Collateral_Type_NC__c==Cross_and_Debenture){
                                    ga2CollSet.add(ncoll.id);//Cross Guarantee And Debenture
                                }
                                
                            }
                            for(Guarantee_Assets__c gaCollateral:[SELECT Id, Name, Asset__c, Collateral_Mgmt__c,Collateral_Mgmt__r.Name,Collateral_Mgmt__r.id,Collateral_Mgmt__r.Charge_ID__c,Collateral_Mgmt__r.RDS_Collateral_Code_New__c,
                                                                  Collateral_Mgmt__r.LLC_BI__Collateral_Type__r.LLC_BI__Type__c,Collateral_Mgmt__r.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c,
                                                                  Collateral_Mgmt__r.Release_Security_New__c,Collateral_Mgmt__r.LLC_BI__Value__c,Collateral_Mgmt__r.Proposed_Value__c,Collateral_Mgmt__r.Prior_Charges__c,
                                                                  Collateral_Mgmt__r.Supports_Guarantee__c,Collateral_Mgmt__r.Supported__c,
                                                                  Collateral_Mgmt__r.Collateral_Status__c,
                                                                  Collateral_Mgmt__r.LLC_BI__Highest__c,Collateral_Mgmt__r.LLC_BI__Parent_Collateral__c,Collateral_Mgmt__r.LLC_BI__Parent_Collateral__r.id,
                                                                  Collateral_Mgmt__r.Charge_Priority__c,Collateral_Mgmt__r.Proposed_Charge_Priority__c,
                                                                  Collateral_Mgmt__r.Address_line_1__c, Collateral_Mgmt__r.Address_line_2__c,Collateral_Mgmt__r.Address_line_3__c,
                                                                  Collateral_Mgmt__r.Address_line_4__c,Collateral_Mgmt__r.Address_line_5__c,Collateral_Mgmt__r.Address_line_6__c,
                                                                  Collateral_Mgmt__r.Post_Code__c,Collateral_Mgmt__r.Proposed_Release_security__c,Collateral_Mgmt__r.Proposed_Prior_charges__c,Collateral_Mgmt__r.Proposed_Collateral_Type__c,Collateral_Mgmt__r.Proposed_Collateral_SubType__c,Collateral_Mgmt__r.Proposed_Collateral_status__c,
                                                                  Collateral_Mgmt__r.Proposed_Address_Line_6__c,Collateral_Mgmt__r.Proposed_Address_line_5__c,Collateral_Mgmt__r.Proposed_Address_line_4__c,Collateral_Mgmt__r.Proposed_Address_line_3__c,Collateral_Mgmt__r.Proposed_Address_line_2__c,Collateral_Mgmt__r.Proposed_Address_line_1__c,Collateral_Mgmt__r.Proposed_Post_Code__c,
                                                                  Collateral_Mgmt__r.LLC_BI__Depth__c,
                                                                  New_Assets__c,New_Assets__r.id, New_Assets__r.Name,New_Assets__r.Collateral_Type_NC__c,New_Assets__r.RDS_Collateral_Code__c,
                                                                  New_Assets__r.Value_NC__c,New_Assets__r.Prior_Charges_NC__c,New_Assets__r.Charge_Priority_NC__c,New_Assets__r.Is_Supported_NC__c,
                                                                  New_Assets__r.Supports_Guarantee_NC__c,New_Assets__r.Record_Complete_NC__c,New_Assets__r.Collateral_Status__c,
                                                                  New_Assets__r.Address_line_1__c,New_Assets__r.Address_line_2__c,New_Assets__r.Address_line_3__c,New_Assets__r.Address_line_4__c,New_Assets__r.Address_line_5__c,New_Assets__r.Address_line_6__c,New_Assets__r.Post_Code_NC__c,
                                                                  New_Assets__r.Collateral_Subtype_NC__c,
                                                                  
                                                                  Type__c, Value__c,
                                                                  Status__c, Asset__r.Collateral_Status__c , Asset__r.Proposed_Collateral_Status__c
                                                                  FROM Guarantee_Assets__c where Asset__c IN:gaCollSet and New_Assets__r.Collateral_Status__c != 'Ignore' and Collateral_Mgmt__r.Collateral_Status__c not in ('Ignore','Charge Abandoned','Discharge Completed')  and 
                                                                        Collateral_Mgmt__r.Proposed_Collateral_Status__c != 'Ignore']){ //added condition in soql as part of GRPCONLEND-24874 to remove associated ignore col from req
                                                                      isSupportedSet.add(gaCollateral.Asset__c);
                                                                      if(gaCollateral.Collateral_Mgmt__c!=null&& !mainCollMap.containsKey(gaCollateral.Collateral_Mgmt__c) && (gaCollateral.Asset__r.Proposed_Collateral_Status__c != 'Ignore' && gaCollateral.Asset__r.Collateral_Status__c != 'Ignore' && gaCollateral.Asset__r.Collateral_Status__c != 'Charge Abandoned' && gaCollateral.Asset__r.Collateral_Status__c != 'Discharge Completed') ){
                                                                          if(!existingsecurityList.contains(gaCollateral.Collateral_Mgmt__r)){
                                                                              existingsecurityList.add(gaCollateral.Collateral_Mgmt__r);
                                                                          }
                                                                          
                                                                          isSupportingSet.add(gaCollateral.Collateral_Mgmt__c);
                                                                          
                                                                          mainCollSet.add(gaCollateral.Collateral_Mgmt__c);
                                                                          mainCollMap.put(gaCollateral.Collateral_Mgmt__c,gaCollateral.Collateral_Mgmt__r);
                                                                       //added in seperate loop as part of GRPCONLEND-24874 to remove associated col from req when guarantee col is ignore col
                                                                      } else if(gaCollateral.Collateral_Mgmt__c!=null&& mainCollMap.containsKey(gaCollateral.Collateral_Mgmt__c) && (gaCollateral.Asset__r.Proposed_Collateral_Status__c == 'Ignore' || gaCollateral.Asset__r.Collateral_Status__c == 'Ignore' || gaCollateral.Asset__r.Collateral_Status__c == 'Charge Abandoned' || gaCollateral.Asset__r.Collateral_Status__c == 'Discharge Completed') ){
                                                                          mainCollMap.remove(gaCollateral.Collateral_Mgmt__c);
                                                                      }
                                                                      

                                                                      if(gaCollateral.New_Assets__c!=null&&!newCollMap.containsKey(gaCollateral.New_Assets__c) && (gaCollateral.Asset__r.Proposed_Collateral_Status__c != 'Ignore' && gaCollateral.Asset__r.Collateral_Status__c != 'Ignore' && gaCollateral.Asset__r.Collateral_Status__c != 'Charge Abandoned' && gaCollateral.Asset__r.Collateral_Status__c != 'Discharge Completed') ){
                                                                          if(!newSecurityList.contains(gaCollateral.New_Assets__r)){
                                                                              newSecurityList.add(gaCollateral.New_Assets__r);
                                                                          }
                                                                          
                                                                          isSupportingSet.add(gaCollateral.New_Assets__c);
                                                                          newCollMap.put(gaCollateral.New_Assets__c,gaCollateral.New_Assets__r);
                                                                      //added in seperate loop as part of GRPCONLEND-24874 to remove associated ignore col from req when guarantee col is ignore col
                                                                      } else if(gaCollateral.New_Assets__c!=null&&newCollMap.containsKey(gaCollateral.New_Assets__c) && (gaCollateral.Asset__r.Proposed_Collateral_Status__c == 'Ignore' || gaCollateral.Asset__r.Collateral_Status__c == 'Ignore' || gaCollateral.Asset__r.Collateral_Status__c == 'Charge Abandoned' || gaCollateral.Asset__r.Collateral_Status__c == 'Discharge Completed') ){
                                                                          newCollMap.remove(gaCollateral.New_Assets__c);
                                                                      }

                                                                  }
                            
                            for(Guarantee_Asset_2__c ga2Collateral:[SELECT Id,  Name,New_Collateral__c, Collateral_Mgmt_GA__c,
                                                                    Collateral_Mgmt_GA__r.Name,Collateral_Mgmt_GA__r.id,Collateral_Mgmt_GA__r.Charge_ID__c,Collateral_Mgmt_GA__r.RDS_Collateral_Code_New__c,
                                                                    Collateral_Mgmt_GA__r.LLC_BI__Collateral_Type__r.LLC_BI__Type__c,Collateral_Mgmt_GA__r.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c,
                                                                    Collateral_Mgmt_GA__r.Release_Security_New__c,Collateral_Mgmt_GA__r.LLC_BI__Value__c,Collateral_Mgmt_GA__r.Proposed_Value__c,Collateral_Mgmt_GA__r.Prior_Charges__c,
                                                                    Collateral_Mgmt_GA__r.Supports_Guarantee__c,Collateral_Mgmt_GA__r.Supported__c,
                                                                    Collateral_Mgmt_GA__r.Collateral_Status__c,
                                                                    Collateral_Mgmt_GA__r.LLC_BI__Highest__c,Collateral_Mgmt_GA__r.LLC_BI__Parent_Collateral__c,Collateral_Mgmt_GA__r.LLC_BI__Parent_Collateral__r.id,
                                                                    Collateral_Mgmt_GA__r.Charge_Priority__c,Collateral_Mgmt_GA__r.Proposed_Charge_Priority__c,
                                                                    Collateral_Mgmt_GA__r.Address_line_1__c, Collateral_Mgmt_GA__r.Address_line_2__c,Collateral_Mgmt_GA__r.Address_line_3__c,
                                                                    Collateral_Mgmt_GA__r.Address_line_4__c,Collateral_Mgmt_GA__r.Address_line_5__c,Collateral_Mgmt_GA__r.Address_line_6__c,
                                                                    Collateral_Mgmt_GA__r.Post_Code__c,Collateral_Mgmt_GA__r.Proposed_Release_security__c,Collateral_Mgmt_GA__r.Proposed_Prior_charges__c,Collateral_Mgmt_GA__r.Proposed_Collateral_Type__c,Collateral_Mgmt_GA__r.Proposed_Collateral_SubType__c,Collateral_Mgmt_GA__r.Proposed_Collateral_status__c,
                                                                    Collateral_Mgmt_GA__r.Proposed_Address_Line_6__c,Collateral_Mgmt_GA__r.Proposed_Address_line_5__c,Collateral_Mgmt_GA__r.Proposed_Address_line_4__c,Collateral_Mgmt_GA__r.Proposed_Address_line_3__c,Collateral_Mgmt_GA__r.Proposed_Address_line_2__c,Collateral_Mgmt_GA__r.Proposed_Address_line_1__c,Collateral_Mgmt_GA__r.Proposed_Post_Code__c,
                                                                    Collateral_Mgmt_GA__r.LLC_BI__Depth__c,
                                                                    New_Collateral_Asset__c,New_Collateral_Asset__r.id, New_Collateral_Asset__r.Name,New_Collateral_Asset__r.Collateral_Type_NC__c,New_Collateral_Asset__r.RDS_Collateral_Code__c,
                                                                    New_Collateral_Asset__r.Value_NC__c,New_Collateral_Asset__r.Prior_Charges_NC__c,New_Collateral_Asset__r.Charge_Priority_NC__c,New_Collateral_Asset__r.Is_Supported_NC__c,
                                                                    New_Collateral_Asset__r.Supports_Guarantee_NC__c,New_Collateral_Asset__r.Record_Complete_NC__c,New_Collateral_Asset__r.Collateral_Status__c,
                                                                    New_Collateral_Asset__r.Address_line_1__c,New_Collateral_Asset__r.Address_line_2__c,New_Collateral_Asset__r.Address_line_3__c,New_Collateral_Asset__r.Address_line_4__c,New_Collateral_Asset__r.Address_line_5__c,New_Collateral_Asset__r.Address_line_6__c,New_Collateral_Asset__r.Post_Code_NC__c,
                                                                    New_Collateral_Asset__r.Collateral_Subtype_NC__c,
                                                                    Type__c, Value_GA__c,
                                                                    Status__c, New_Collateral__r.Collateral_Status__c
                                                                    FROM Guarantee_Asset_2__c where New_Collateral__c in:ga2CollSet and New_Collateral_Asset__r.Collateral_Status__c != 'Ignore' and Collateral_Mgmt_GA__r.Collateral_Status__c not in ('Ignore','Charge Abandoned','Discharge Completed')  and 
                                                                        Collateral_Mgmt_GA__r.Proposed_Collateral_Status__c != 'Ignore']){ //added condition in soql as part of GRPCONLEND-24874 to remove associated ignore col from req
                                                                        isSupportedSet.add(ga2Collateral.New_Collateral__c);
                                                                        if(ga2Collateral.Collateral_Mgmt_GA__c!=null&& !mainCollMap.containsKey(ga2Collateral.Collateral_Mgmt_GA__c) && ga2Collateral.New_Collateral__r.Collateral_Status__c != 'Ignore'){
                                                                            if(!existingsecurityList.contains(ga2Collateral.Collateral_Mgmt_GA__r)){
                                                                                existingsecurityList.add(ga2Collateral.Collateral_Mgmt_GA__r);
                                                                            }
                                                                            isSupportingSet.add(ga2Collateral.Collateral_Mgmt_GA__c);
                                                                            mainCollSet.add(ga2Collateral.Collateral_Mgmt_GA__c);
                                                                            mainCollMap.put(ga2Collateral.Collateral_Mgmt_GA__c,ga2Collateral.Collateral_Mgmt_GA__r);
                                                                         //added in seperate loop as part of GRPCONLEND-24874 to remove associated ignore col from req when guarantee col is ignore col
                                                                        }  else if(ga2Collateral.Collateral_Mgmt_GA__c!=null && newCollMap.containsKey(ga2Collateral.Collateral_Mgmt_GA__c) && ga2Collateral.New_Collateral__r.Collateral_Status__c == 'Ignore'){
                                                                            mainCollMap.remove(ga2Collateral.Collateral_Mgmt_GA__c);
                                                                        }
                                                                        
                                                                        if(ga2Collateral.New_Collateral_Asset__c!=null&&!newCollMap.containsKey(ga2Collateral.New_Collateral_Asset__c) && ga2Collateral.New_Collateral__r.Collateral_Status__c != 'Ignore'){
                                                                            if(!newSecurityList.contains(ga2Collateral.New_Collateral_Asset__r) ){
                                                                                newSecurityList.add(ga2Collateral.New_Collateral_Asset__r);
                                                                            }
                                                                            isSupportingSet.add(ga2Collateral.New_Collateral_Asset__c);
                                                                            newCollMap.put(ga2Collateral.New_Collateral_Asset__c,ga2Collateral.New_Collateral_Asset__r);
                                                                        //added in seperate loop as part of GRPCONLEND-24874 to remove associated ignore col from req when guarantee col is ignore col
                                                                        } else if(ga2Collateral.New_Collateral_Asset__c!=null && newCollMap.containsKey(ga2Collateral.New_Collateral_Asset__c) && ga2Collateral.New_Collateral__r.Collateral_Status__c == 'Ignore'){
                                                                            newCollMap.remove(ga2Collateral.New_Collateral_Asset__c);
                                                                        }
                                                                        
                                                                    }
                             //Changes started - added in seperate loop as part of GRPCONLEND-24874 to remove ignore col from req
                             for(String key : newCollMap.keySet()){
                                 if(newCollMap.get(key).Collateral_Status__c == 'Ignore'){
                                     newCollMap.remove(key);
                                 }
                             }
                             newSecurityList = newCollMap.values();
                             
                             for(String key : mainCollMap.keySet()){
                                 if(mainCollMap.get(key).Collateral_Status__c == 'Ignore' || mainCollMap.get(key).Proposed_Collateral_Status__c == 'Ignore' ||  mainCollMap.get(key).Collateral_Status__c == 'Charge Abandoned' || mainCollMap.get(key).Collateral_Status__c == 'Discharge Completed'){
                                     mainCollMap.remove(key);
                                 }
                             }
                             existingsecurityList = mainCollMap.values();
                             mainCollSet = mainCollMap.keySet();
                             // Changes ended - added in seperate loop as part of GRPCONLEND-24874 to remove ignore col from req
                             
                            for (LLC_BI__Collateral__c childCollRec : [select id,Name,Charge_ID__c,RDS_Collateral_Code_New__c,LLC_BI__Collateral_Type__r.LLC_BI__Type__c,LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c,
                                                                       Release_Security_New__c,LLC_BI__Value__c,Prior_Charges__c,Proposed_Value__c,
                                                                       Supports_Guarantee__c,Supported__c,
                                                                       Collateral_Status__c,
                                                                       LLC_BI__Highest__c,LLC_BI__Parent_Collateral__c,LLC_BI__Parent_Collateral__r.id,
                                                                       Charge_Priority__c,Proposed_Charge_Priority__c,
                                                                       Address_line_1__c, Address_line_2__c,Address_line_3__c,
                                                                       Address_line_4__c,Address_line_5__c,Address_line_6__c,
                                                                       Post_Code__c,Proposed_Release_security__c,Proposed_Prior_charges__c,Proposed_Collateral_Type__c,Proposed_Collateral_SubType__c,Proposed_Collateral_status__c,
                                                                       Proposed_Address_Line_6__c,Proposed_Address_line_5__c,Proposed_Address_line_4__c,Proposed_Address_line_3__c,Proposed_Address_line_2__c,Proposed_Address_line_1__c,Proposed_Post_Code__c,
                                                                       LLC_BI__Depth__c 
                                                                       from LLC_BI__Collateral__c where 
                                                                       Collateral_Status__c  in ('Asset Active')  and 
                                                                       LLC_BI__Parent_Collateral__c=:mainCollSet ]) {
                                                                           
                                                                           if(childCollRec.LLC_BI__Collateral_Type__r.LLC_BI__Type__c=='Land'){
                                                                               // parent colater, one child map   first chile of land 
                                                                               if(childCollMap!=null&&!childCollMap.containsKey(childCollRec.LLC_BI__Parent_Collateral__r.id))
                                                                                   childCollMap.put(childCollRec.LLC_BI__Parent_Collateral__r.id,childCollRec);
                                                                           }
                                                                           
                                                                       }
                            
                            facCount=CG_INT_Utility.getCount(newFacilityList)+CG_INT_Utility.getCount(existingFacilityList);
                            totalSecCount=CG_INT_Utility.getCount(existingsecurityList)+CG_INT_Utility.getCount(newSecurityList);
                            questionMap=getQuestionnaireMap(questionaireList,sfgScriptList );
                            
                            /*   Wrapper record creation */
                            
                            CG_INT_BBAssistedRequestWrapper.Attributes attr=new CG_INT_BBAssistedRequestWrapper.Attributes();
                            attr.borrowingDetails= getBorrowingDetails(newFacilityList,existingFacilityList,facilityPricingMap,facilityFeeMap,mcobFacMap,modifiedParentLoanIdSet);
                            attr.customerBusinessDetails=getCustomerBusinessDetails(legalStatus);
                            attr.customerFinancialDetails=getCustomerFinancialDetails(financialList);
                            attr.exposures= getExposures(accId);
                            attr.directors=null;
                            if(!directorMap.isEmpty()){
                                if(!indContactMap.isEmpty()){
                                    attr.directors=getDirectors(directorMap,creditAppId,indContactMap);
                                    dirCount=attr.directors.size();
                                }
                                else { mandatoryErrorList.add('Individual organisation and Related contact should be connected via contact Id /customer Id');}
                            }
                            
                            attr.securities=getSecurities(existingsecurityList,newSecurityList,sfgNewLoanIdAmountMap);
                            if(attr.securities.size()==0){
                                attr.securities=null;
                            }
                            else{
                                totalSecCount=attr.securities.size();
                            }
                            attr.bbmDetails= getBbmDetails();
                            if(apiName=='lendingDecisions'){
                                if(sfgLoanIdSet.size()>0&&(!questionMap.containsKey('S01')||(questionMap.containsKey('S01')&&questionMap.get('S01')!=true))){
                                    mandatoryErrorList.add('Please read out the SFG script to the customer');
                                }
                                if(!mcobFacMap.isEmpty()&&(mcobFacMap.values().contains('Y'))&&isCAMCOBreg==false)
                                {
                                    mandatoryErrorList.add('Please read out the MCOB Regulated lending script to the customer ');
                                }
                                if(!mcobFacMap.isEmpty()&&(mcobFacMap.values().contains('X'))&&isCAOutOfScopeMCOB==false)
                                {
                                    mandatoryErrorList.add('Please read out the Out of scope of MCOB script to the customer ');
                                }
                                attr.questionnaire=getQuestionnaire(questionMap);
                                if(creditApp.Application_Purpose__c!='2A'){
                                    attr.consultantDetails=getConsultantDetails();
                                }
                            }
                            attr.applicationDetails=getApplicationDetails(attr.borrowingDetails.facilities.size(),dirCount,totalSecCount,isBureauFlag,isFraudFlag);
                            CG_INT_BBAssistedRequestWrapper bbAssistedRequestWrapper=new CG_INT_BBAssistedRequestWrapper(new CG_INT_BBAssistedRequestWrapper.Data(CG_INT_Utility.generateAttributeId(11),typeName,attr));
                            requestBody=JSON.serializePretty(bbAssistedRequestWrapper,true).replace('currency_x','currency');
                        }
                        else{
                            requestBody= constructBTRequest();
                            requestBodyMap.put('btApiName','businessTargetters');
                        }
                    }else{
                        if(!isValidPurpose){
                            mandatoryErrorList.add('Selected Application Purpose is not Applicable ');
                        }
                        
                        else if(
                            (!isPricingAPiCalled || isRepricingRequired)){
                            //ATHN-1301 Error message text changed
                            mandatoryErrorList.add('Please click on ‘Calculate Pricing’ to proceed further in the lending journey');
                        }
                        else if(creditApp.Date_of_Previous_CCR_Call__c==null){ 
                            mandatoryErrorList.add(CG_Constants.REQUIRED_CCR_CALL);
                        } 
                    }
            }
            else{
                if(apiName=='lendingPrices'&&!isPricingCallAllowed ){
                    mandatoryErrorList.add('The role profile does not allow pricing for the application');
                }
                else if(apiName=='lendingDecisions'&&!isDecisionCallAllowed){
                    mandatoryErrorList.add('The role profile does not allow submission for Auto-decision for the Credit application');
                }
                
            }
        }else{
            mandatoryErrorList.add('Please select the Application Purpose');
        }
        //Added for BUKBBSF-29481 and BUKBBSF-25872
        if(apiName=='lendingPrices'){
            if(String.isBlank(creditApp.RWM_Proposed__c) && String.isBlank(creditApp.RWM_Golden_Source__c) ){
                mandatoryErrorList.add(System.Label.RWM_Proposed_Golden_Pricing_Error);
            }else if(String.isBlank(creditApp.RWM_Proposed__c)){
                mandatoryErrorList.add(System.Label.RWM_Golden_Source_Pricing_Error);
            } else if(String.isBlank(creditApp.RWM_Golden_Source__c)){
                mandatoryErrorList.add(System.Label.RWM_Proposed_Pricing_Error);
            }
        }
        if(mandatoryErrorList.isEmpty()){
            requestBodyMap.put('success',requestBody);
            requestBodyMap.put('creditAppId',creditApp.Credit_Application_ID__c);
        }
        else{
            requestBodyMap.put('error',mandatoryErrorList);
        }
        
        return requestBodyMap;
    }
    /**
*  Description    Method to create BT HTTP Request.
*  @name          constructBTRequest   
*  @param         No parms
*  @return        string
*  @throws exception No
*/    
    public String constructBTRequest(){
        //API Request
        Map<String, Object> requestAttributes = new Map<String, Object>();                          
       
        if(acc.Company_Registration_Number__c!=null&&acc.Company_Registration_Number__c!='0')
            requestAttributes.put('businessRef', acc.Company_Registration_Number__c);
        if(acc.Registered_Name__c!=null||acc.Name!=null){
            String name=acc.Registered_Name__c!=null?acc.Registered_Name__c:acc.Name;
            if(name.length()>60)
                name=name.substring(0,60);
            requestAttributes.put('businessName', name);}  
        else{
            mandatoryErrorList.add('Business Name is required for BT Call');
        }
        if(acc.Phone__c!=null)   
            requestAttributes.put('phoneNumber', (acc.Phone__c).replaceAll( '\\s+', ''));
        Map<String, Object> location = new Map<String, Object>();
        if(acc.Post_Code__c!=null)
            location.put('locationpostCode',acc.Trading_Post_Code__c);
        if(location.size()>1)   
            requestAttributes.put('location', location);
        
        
        Map<String, Object> requestData = new Map<String, Object>();   
        requestData.put('id', CG_INT_Utility.generateAttributeId(11));
        requestData.put('type', 'businessTargetters');
        requestData.put('attributes', requestAttributes);
        Map<String, Object> data = new Map<String, Object>();  
        data.put('data',requestData);
        
        String jsonRequestMessage = JSON.serializePretty(data,true);          
        
        return jsonRequestMessage;
    }
    /**
*  Description    Method to get Application Record details
*  @name          getApplicationDetails   
*  @param         Integer facCount,Integer dirCount,Integer secCount,String bureauFlag,String fraudFlag
*  @return        CG_INT_BBAssistedRequestWrapper.ApplicationDetails
*  @throws exception No
*/    
    public  CG_INT_BBAssistedRequestWrapper.ApplicationDetails getApplicationDetails(Integer facCount,Integer dirCount,Integer secCount,String bureauFlag,String fraudFlag){
        String creditFlag=bureauFlag;
        CG_INT_BBAssistedRequestWrapper.ApplicationDetails appDetails=new CG_INT_BBAssistedRequestWrapper.ApplicationDetails();
        appDetails.channel='2';//description: Channel. 1-ROLB 2-NCINO
        String goldenValue  = creditapp.RWM_Golden_Source__c;
        String proposedValue = creditapp.RWM_Proposed__c;
        appDetails.decisionSystemId=creditApp.Decision_System_ID__c;
        if(apiName=='lendingPrices'){
            appDetails.applicationId=creditApp.Credit_Application_ID__c;
            appDetails.appRepCount=creditApp.appRepCountPricing__c;
        }
        appDetails.applicationType=appPurposeSetting.RDS_Code__c;
        
        appDetails.entity=(creditApp.Application_Entity__c=='BUK'?'BUK':'XR');
        if(creditApp.Application_Entity__c==null) {mandatoryErrorList.add('Application Entity is required');}
        appDetails.noOfFacilities=facCount;
        appDetails.noOfDirectors=dirCount;
        if(appDetails.noOfDirectors==0||appDetails.noOfDirectors==null){mandatoryErrorList.add('Minimum One director required');}
        appDetails.noOfSecurities=secCount;
        
        //Added for BUKBBSF-31727 and BUKBBSF-31724
        //appDetails.retailWholesaleMarker = new  CG_INT_BBAssistedRequestWrapper.RetailWholesaleMarker(goldenValue,proposedValue);
        

        // below is for decision
        if(apiName=='lendingDecisions'){
            appDetails.appRepCount=creditApp.Auto_Decision_Counter__c;
            appDetails.applicationDate=CG_INT_Utility.getAPIDateTimeAsString(creditApp.createddate); 
            if(decisionList!=null&&decisionList.size()>0){
                appDetails.fraudSystemId=decisionList[0].Fraud_SystemId__c; 
                appDetails.consumerBureauId=decisionList[0].eBDR_reference__c;
            }  
            appDetails.bpalMaxLimit=creditApp.BPAL_Limit__c!=null?new CG_INT_BBAssistedRequestWrapper.Amount(creditApp.BPAL_Limit__c):null;
            if(creditApp.Status__c=='Sanctioned'||creditApp.Status__c=='Fulfilment') creditFlag='N';// flags based on applcaiotn purpso
            appDetails.decisionParams=new CG_INT_BBAssistedRequestWrapper.DecisionParams(creditFlag,fraudFlag);
        }
        return appDetails;
        
        
    }
    /**
*  Description    Method to get the borrowing details.
*  @name          getBorrowingDetails   
*  @param         List<LLC_BI__Loan__c> newFacilityList,List<LLC_BI__Loan__c> facList,Map<Id,LLC_BI__Pricing_Option__c> rateMap,Map<Id,LLC_BI__Fee__c> feeMap,Map<Id,String> mcobFacilityMap,set<Id> modParentIdSet
*  @return        CG_INT_BBAssistedRequestWrapper.BorrowingDetails
*  @throws exception No
*/
    public  CG_INT_BBAssistedRequestWrapper.BorrowingDetails getBorrowingDetails(List<LLC_BI__Loan__c> newFacilityList,List<LLC_BI__Loan__c> facList,Map<Id,LLC_BI__Pricing_Option__c> rateMap,Map<Id,LLC_BI__Fee__c> feeMap,Map<Id,String> mcobFacilityMap,set<Id> modParentIdSet){
        Map<String,String> frequencyMap=new Map<String,String>{'Monthly'=>'1','Quarterly'=>'3','6 Monthly'=>'6','Annually'=>'12'};
            CG_INT_BBAssistedRequestWrapper.BorrowingDetails borrowingDetails=new CG_INT_BBAssistedRequestWrapper.BorrowingDetails();
        List<CG_INT_BBAssistedRequestWrapper.Facilities> newFacilitiesList=new List<CG_INT_BBAssistedRequestWrapper.Facilities>();
        String finalfees,finalRate;
        for(LLC_BI__Loan__c singleFac:newFacilityList){
            //GRPCONLEND-21693 updated below as null to reset for each facility
            finalfees=null;
            finalRate=null;
            //GRPCONLEND-2O427 below 2 lines added
            if(singleFac.LLC_BI__Principal_Balance__c==null) singleFac.LLC_BI__Principal_Balance__c=0;
            if(singleFac.Undrawn_Amount__c==null) singleFac.Undrawn_Amount__c=0;
            //ATHN-760     
            if((singleFac.LLC_BI__Product__c=='BACS' ||singleFac.LLC_BI__Product__c=='Payflow')&&singleFac.Frequency__c=='Daily'&&singleFac.LLC_BI__Amount__c!=null){
                singleFac.LLC_BI__Amount__c=2*singleFac.LLC_BI__Amount__c;
            } 
            if(newFacilitiesList!=null&&newFacilitiesList.size()<=60){
                Decimal caFacAmount=singleFac.LLC_BI__Amount__c;
                
                CG_INT_BBAssistedRequestWrapper.Facilities newFacilty=new CG_INT_BBAssistedRequestWrapper.Facilities(); 
                newFacilty.facilityDetailId=singleFac.id; 
                if(singleFac.LLC_BI__Stage__c=='Booked') // stage complete and withdraw not required change the SOQL
                {
                    newFacilty.facilityIndicator='E';
                    
                }
                else if(singleFac.LLC_BI__Is_Modification__c==true){
                    newFacilty.facilityIndicator='A';
                }
                else{
                    newFacilty.facilityIndicator='N';
                } 
                newFacilty = mapFacilityDetails(newFacilty, singleFac); 
                
                if(newFacilty.term==null&&(singleFac.LLC_BI__Product_Type__c=='Loan'||singleFac.LLC_BI__Product_Type__c=='Specialist Loan')){
                    mandatoryErrorList.add('Facility Term  is required for '+singleFac.Name);
                }
                if(singleFac.LLC_BI__Product_Type__c=='Loan' ||singleFac.LLC_BI__Product_Type__c=='Specialist Loan'){
                    if(singleFac.LLC_BI__Stage__c =='Booked'|| (singleFac.LLC_BI__IS_Modification__c==true&&singleFac.Action__c!=partialPayoff
                                                                &&singleFac.Action__c!=fullPayoff)){
                                                                    //GRPCONLEND-2O427 below  lines added
                                                                    caFacAmount=singleFac.LLC_BI__Principal_Balance__c+singleFac.Undrawn_Amount__c;
                                                                }
                }
                //GRPCONLEND-2O427 below 1 line added
                newFacilty.amount =caFacAmount!=null?new CG_INT_BBAssistedRequestWrapper.Amount(caFacAmount):null;
                if(newFacilty.amount==null){mandatoryErrorList.add('Amount is required for '+singleFac.Name);}
                newFacilty.expiryDate=CG_INT_Utility.getDateAsString(singleFac.Renewal_Date__c); 
                if(rateMap.size()>0&&rateMap.containskey(singleFac.id)&&singleFac.LLC_BI__Stage__c!='Booked'){ 
                    if((rateMap.get(singleFac.id)).Interest_type__c=='Fixed') newFacilty.rateType ='R';
                    else if((rateMap.get(singleFac.id)).Interest_type__c=='Variable') newFacilty.rateType ='M';
                    
                    if(newFacilty.rateType ==null){mandatoryErrorList.add('Rate Type is required for '+singleFac.Name);}
                    
                }
                newFacilty.benchmarkRate='BOE';
                if(singleFac.LLC_BI__Stage__c!='Booked'&&(apiName=='lendingDecisions'||(apiName=='lendingPrices'&&singleFac.LLC_BI__Is_Modification__c==true))){
                    if(feeMap.size()>0&&feeMap.containskey(singleFac.id)){ 
                        finalfees=CG_INT_Utility.getDecimalAsString(feeMap.get(singleFac.id).Discretion_Product_Fee__c ); 
                        if(finalfees==null){ 
                            finalfees=CG_INT_Utility.getDecimalAsString(0.00); 
                        }
                    }
                    if(rateMap.size()>0&&rateMap.containskey(singleFac.id)){ 
                        finalRate=CG_INT_Utility.getDecimalAsString(rateMap.get(singleFac.id).Discretion_Margin_Rate__c); 
                        if(finalRate==null){ 
                            mandatoryErrorList.add('Margin Rate is required');}
                    }} 
                if(finalfees!=null&&finalRate!=null){
                    newFacilty.pricingInfo=new CG_INT_BBAssistedRequestWrapper.PricingInfo(finalfees,finalRate);
                }                
                if(apiName=='lendingPrices'&&singleFac.LLC_BI__Stage__c!='Booked'){
                    if(singleFac.LLC_BI__Product_Type__c=='Loan'||singleFac.LLC_BI__Product_Type__c=='Specialist Loan'){
                        CG_INT_BBAssistedRequestWrapper.RepaymentDetails repaymentDetails=new CG_INT_BBAssistedRequestWrapper.RepaymentDetails();
                        if(singleFac.LLC_BI__Interest_Rate_Adjustment_Frequency__c!=null&&frequencyMap.containsKey(singleFac.LLC_BI__Interest_Rate_Adjustment_Frequency__c)){
                            repaymentDetails.repaymentFrequency  =frequencyMap.get(singleFac.LLC_BI__Interest_Rate_Adjustment_Frequency__c);
                        }
                        
                        if(rateMap.size()>0&&rateMap.containskey(singleFac.id)){
                            if((rateMap.get(singleFac.id)).Fixed_Interest_Rate_Term_years__c!=null){ 
                                
                                repaymentDetails.fixedRateTerm=(rateMap.get(singleFac.id)).Fixed_Interest_Rate_Term_years__c; 
                                //GRPCONLEND-20433- convert into months as per JIRA ,commented as per GRPCONLEND-21183
                                
                                if(repaymentDetails.fixedRateTerm>120){
                                    mandatoryErrorList.add('Fixed Rate Term (months) cannot be greater than 120 months');
                                }
                            }
                            else{
                                if((rateMap.get(singleFac.id)).Interest_type__c=='Fixed'&&singleFac.LLC_BI__Product__c!='Barclayloan for Business Up to £25k'){
                                    mandatoryErrorList.add('Please enter the Fixed Rate Term (months) for the facility');
                                }
                            }
                        }
                        repaymentDetails.amortisationTerm   =singleFac.LLC_BI__Amortized_Term_Months__c;
                        //ATHN-1318 crhTerm, frhTerm to be skipped for 0/null
                        if(singleFac.Capital_Repayment_Holiday__c!=null &&singleFac.Capital_Repayment_Holiday__c>0){
                            repaymentDetails.crhTerm  =singleFac.Capital_Repayment_Holiday__c;
                        }
                        if(singleFac.Full_Repayment_Holiday_Months__c!=null &&singleFac.Full_Repayment_Holiday_Months__c>0){
                            repaymentDetails.frhTerm  =singleFac.Full_Repayment_Holiday_Months__c;
                        }
                        if(feeMap.size()>0&&feeMap.containskey(singleFac.id)){ 
                            repaymentDetails.addFeeToLoan=(feeMap.get(singleFac.id).Add_Fee_To_Loan__c?'Y':'N' ); 
                        }
                        else{
                            repaymentDetails.addFeeToLoan='N';
                        }
                        
                        newFacilty.repaymentDetails=repaymentDetails;
                    }
                    newFacilty.repaymentProfileRequired=(singleFac.LLC_BI__Product_Reference__r.Repayment_Profile_Required__c?'Y':'N');
                    
                    // fix for GRPCONLEND-22260 start
                    if(singleFac.Renewal_Date__c == null && (singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_OVERDRAFT || singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_DDO)){
                        mandatoryErrorList.add(CG_Constants.REQUIRED_DATA_FOR_FACILITIES+singleFac.Name);  
                    }
                    else if(singleFac.LLC_BI__Is_Secured__c == false && (singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_AGRICULTURAL_MORTGAGE || singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_COMMERCIAL_MORTGAGE
                                                                        || singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_EFGL || singleFac.LLC_BI__Product__c==CG_Constants.PRODUCT_RLS)){
                        mandatoryErrorList.add(CG_Constants.REQUIRED_DATA_FOR_FACILITIES+singleFac.Name);
                                                                        }
                    else if(singleFac.XR_third_party_collateral_attestation__c == null && 
                            (singleFac.LLC_BI__Product_Type__c==CG_Constants.PRODUCT_TYPE_CRSL || singleFac.LLC_BI__Product_Type__c==CG_Constants.PRODUCT_TYPE_SF|| singleFac.LLC_BI__Product_Type__c==CG_Constants.PRODUCT_TYPE_TF
                             || singleFac.LLC_BI__Product_Type__c == CG_Constants.PRODUCT_TYPE_SFET)){
                        mandatoryErrorList.add(CG_Constants.REQUIRED_DATA_FOR_FACILITIES+singleFac.Name);
                             }
                    //fix end for GRPCONLEND-22260
                }
                //fix for GRPCONLEND-19830
                if(apiName=='lendingPrices'&&(singleFac.LLC_BI__Stage__c=='Booked'||(singleFac.LLC_BI__Is_Modification__c==true&&singleFac.LLC_BI__Amount__c<1000))){
                    newFacilty.repaymentProfileRequired='N';
                }
                if(apiName=='lendingDecisions'){
                   
                    newFacilty.purpose=CG_INT_Validations.getFacilityPurpose(singleFac.Facility_Purpose__c);// facility purpose transformation
                    if(mcobFacilityMap!=null&&!mcobFacilityMap.isEmpty()&&mcobFacilityMap.containsKey(singleFac.id)){
                        newFacilty.mcobIdentifier=mcobFacilityMap.get(singleFac.id);
                    }
                    /***************** GRPCONLEND-22075 ************************/
                    else { if(creditApp.Application_Purpose__c!='2A'&&(singleFac.LLC_BI__Product_Type__c=='Overdraft' ||singleFac.LLC_BI__Product_Type__c=='Loan'||singleFac.LLC_BI__Product_Type__c=='Specialist Loan') && singleFac.Action__c !='Cancel' && singleFac.Action__c !=fullPayoff)mandatoryErrorList.add('MCOB Questionnaire is required for '+singleFac.Name);}
                    /***************** END ************************/
                    newFacilty.sortCode=singleFac.Sort_Code__c;
                    newFacilty.accountNumber=singleFac.Account_Number__c;
                }
                
                newFacilitiesList.add(newFacilty);}
        }
        for(LLC_BI__Loan__c singleFac:facList){
            //GRPCONLEND-2O427 below 2 lines added
            if(singleFac.LLC_BI__Principal_Balance__c==null) singleFac.LLC_BI__Principal_Balance__c=0;
            if(singleFac.Undrawn_Amount__c==null) singleFac.Undrawn_Amount__c=0;
            //ATHN-760     
            if((singleFac.LLC_BI__Product__c=='BACS' ||singleFac.LLC_BI__Product__c=='Payflow')&&singleFac.Frequency__c=='Daily'&&singleFac.LLC_BI__Amount__c!=null){
                singleFac.LLC_BI__Amount__c=2*singleFac.LLC_BI__Amount__c;
            } 
            if(newFacilitiesList!=null&&newFacilitiesList.size()<=60){
                Decimal orgFacAmount=singleFac.LLC_BI__Amount__c;
                if(modParentIdSet.isEmpty()||!modParentIdSet.contains(singleFac.id)){
                    CG_INT_BBAssistedRequestWrapper.Facilities newFacilty=new CG_INT_BBAssistedRequestWrapper.Facilities(); 
                    newFacilty.facilityDetailId=singleFac.id; 
                    if(singleFac.LLC_BI__Stage__c=='Booked') // stage complete and withdraw not required change the SOQL
                    {
                        newFacilty.facilityIndicator='E';
                    }
                    newFacilty = mapFacilityDetails(newFacilty, singleFac);
                    
                    if(singleFac.LLC_BI__Product_Type__c=='Loan' ||singleFac.LLC_BI__Product_Type__c=='Specialist Loan'){
                        //GRPCONLEND-2O427 below 1 line added
                        orgFacAmount=singleFac.LLC_BI__Principal_Balance__c+singleFac.Undrawn_Amount__c;
                    
                    }
                    //GRPCONLEND-2O427 below 1 line added
                    newFacilty.amount =orgFacAmount!=null?new CG_INT_BBAssistedRequestWrapper.Amount(orgFacAmount):null;
                    if(newFacilty.amount==null){mandatoryErrorList.add('Amount is required for '+singleFac.Name);}
                    newFacilty.expiryDate=CG_INT_Utility.getDateAsString(singleFac.Renewal_Date__c); 
                    
                    newFacilty.benchmarkRate='BOE';
                    if(apiName=='lendingPrices'){
                        newFacilty.repaymentProfileRequired='N';
                    }
                    
                    if(apiName=='lendingDecisions'){
                        
                        newFacilty.purpose=CG_INT_Validations.getFacilityPurpose(singleFac.Facility_Purpose__c);//transformation needed
                        
                        newFacilty.sortCode=singleFac.Sort_Code__c;
                        newFacilty.accountNumber=singleFac.Account_Number__c;
                    }
                    
                    newFacilitiesList.add(newFacilty);}}
        }
        borrowingDetails.facilities=newFacilitiesList;
        if(newFacilitiesList.isEmpty()){mandatoryErrorList.add('No Facilities available to Price');}
        return borrowingDetails;
    }
    /**
*  Description    Method to get Customer business details.
*  @name          getCustomerBusinessDetails   
*  @param         String legalStatus
*  @return        CG_INT_BBAssistedRequestWrapper.CustomerBusinessDetails
*  @throws exception No
*/
    public  CG_INT_BBAssistedRequestWrapper.CustomerBusinessDetails getCustomerBusinessDetails(String legalStatus){
        CG_INT_BBAssistedRequestWrapper.CustomerBusinessDetails custDetails=new CG_INT_BBAssistedRequestWrapper.CustomerBusinessDetails();
        custDetails.customerId =acc.Customer_ID__c;
        custDetails.btaCode=acc.BTA_Code__c;
        if(acc.BIC_Code__c!=null){custDetails.bicCode=acc.BIC_Code__c;} else { mandatoryErrorList.add('BIC Code is required');}
        //GRPCONLEND-21010
        if(acc.Company_Registration_Number__c!=null&&acc.Company_Registration_Number__c!='0'){
            custDetails.companyRegisterNumber=acc.Company_Registration_Number__c;
        }
        if(acc.Client_Acquisition_Date__c!=null){ custDetails.bankRelationshipStartDate =CG_INT_Utility.getDateAsString(acc.Client_Acquisition_Date__c);} else { mandatoryErrorList.add('Relationship date with bank is required');}
        
        custDetails.businessType=acc.Type;
        if(legalStatus!=null&&legalStatus!='Yes')  custDetails.legalStatus=legalStatus;
        else 
            custDetails.legalStatus=creditApp.LegalStatus__c;
        if(custDetails.legalStatus==null){mandatoryErrorList.add('Legal Status is required');}
        custDetails.businessName =acc.Registered_Name__c!=null?acc.Registered_Name__c:acc.Name;
        if(acc.Business_Start_Date__c!=null){ custDetails.businessStartDate=CG_INT_Utility.getDateAsString(acc.Business_Start_Date__c);} else { mandatoryErrorList.add(' Business start date is required');}
        
        custDetails.btReference=creditApp.BusinessTargetterID__c;
        custDetails.emailAddress=CG_INT_Utility.getStringAsList(acc.Email_address_for_main_principal_contact__c);
        if(apiName=='lendingDecisions'){
            String rdsAddressType='F';
            String rdsCountry;
            if(acc.Address_Type_Current_Address__c!=null&&addressTypeMap.containsKey(acc.Address_Type_Current_Address__c)){
                rdsAddressType=addressTypeMap.get(acc.Address_Type_Current_Address__c);
            }
            
            if(rdsAddressType=='U') {rdsCountry='GBR';}
            if(acc.Add_line_1__c!=null ||acc.Add_line_2__c!=null ||acc.Add_line_3__c!=null ||acc.Add_line_4__c!=null ||acc.Add_line_5__c!=null ||acc.Add_line_6__c!=null){
                CG_INT_BBAssistedRequestWrapper.Address registeredAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                registeredAddress.addressType= rdsAddressType;
                registeredAddress.addressLines=CG_INT_Utility.getAddressLinesAsList(acc.Add_line_1__c,acc.Add_line_2__c,acc.Add_line_3__c,acc.Add_line_4__c,acc.Add_line_5__c,acc.Add_line_6__c);
                registeredAddress.country=rdsCountry;
                registeredAddress.postCode=acc.Post_Code__c;
                if(rdsAddressType!='F'&&acc.Post_Code__c==null){mandatoryErrorList.add('Registered Address Post Code is required');}
                custDetails.registeredAddress=registeredAddress;
            }
            if(acc.Trading_Address_Line_1__c!=null ||acc.Trading_Address_Line_2__c!=null ||acc.Trading_Address_Line_3__c!=null ||acc.Trading_Address_Line_4__c!=null ||acc.Trading_Address_Line_5__c!=null ||acc.Trading_Address_Line_6__c!=null){   
                CG_INT_BBAssistedRequestWrapper.Address tradingAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                
                tradingAddress.addressType=rdsAddressType;
                tradingAddress.addressLines=CG_INT_Utility.getAddressLinesAsList(acc.Trading_Address_Line_1__c,acc.Trading_Address_Line_2__c,acc.Trading_Address_Line_3__c,acc.Trading_Address_Line_4__c,acc.Trading_Address_Line_5__c,acc.Trading_Address_Line_6__c);
                tradingAddress.country=rdsCountry;
                tradingAddress.postCode=acc.Trading_Post_Code__c; 
                
                if(rdsAddressType!='F'&&acc.Trading_Post_Code__c==null){mandatoryErrorList.add('Trading Address Post Code is required');}
                custDetails.tradingAddress=tradingAddress;
            }
            if(acc.Correspondence_Add_line_1__c!=null ||acc.Correspondence_Add_line_2__c!=null ||acc.Correspondence_Add_line_3__c!=null ||acc.Correspondence_Add_line_4__c!=null ||acc.Correspondence_Add_line_5__c!=null ||acc.Correspondence_Add_line_6__c!=null){
                CG_INT_BBAssistedRequestWrapper.Address correspondenceAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                
                correspondenceAddress.addressType=rdsAddressType;
                correspondenceAddress.addressLines=CG_INT_Utility.getAddressLinesAsList(acc.Correspondence_Add_line_1__c,acc.Correspondence_Add_line_2__c,acc.Correspondence_Add_line_3__c,acc.Correspondence_Add_line_4__c,acc.Correspondence_Add_line_5__c,acc.Correspondence_Add_line_6__c);
                correspondenceAddress.country=rdsCountry;
                correspondenceAddress.postCode=acc.Correspondence_Post_Code__c;
                if(rdsAddressType!='F'&&acc.Correspondence_Post_Code__c==null){mandatoryErrorList.add('Correspondence Address Post Code is required');}
                custDetails.correspondenceAddress=correspondenceAddress;
            }
            
            List<CG_INT_BBAssistedRequestWrapper.Telephone> telephoneList=new List<CG_INT_BBAssistedRequestWrapper.Telephone>();
            if(acc.Mobile__c!=null){
                telephoneList.add(getTelephoneValue('MOB',acc.Mobile__c));
            }
            if(acc.Phone__c!=null){
                telephoneList.add(getTelephoneValue('BUS',acc.Phone__c));
            }
            // Business - Mobile__c (MOB), Phone__c  (BUS)
            //Indivudal : HomePhone (HOM), MobilePhone (MOB), Phone (Work)  (WOR)
            if(telephoneList.size()>0)  custDetails.telephone=telephoneList;
            
            custDetails.referStream=CG_INT_Utility.getDecimalAsString(acc.Refer_Stream__c);
        }
        return custDetails;
    }
    /**
*  Description    Method to get Customer financial details.
*  @name          getCustomerFinancialDetails   
*  @param         String legalStatus
*  @return        CG_INT_BBAssistedRequestWrapper.CustomerFinancialDetails
*  @throws exception No
*/
    public  CG_INT_BBAssistedRequestWrapper.CustomerFinancialDetails getCustomerFinancialDetails(List<CG_Spreads__c> financialList){
        CG_INT_BBAssistedRequestWrapper.CustomerFinancialDetails financialDetail;
        if(financialList.size()==1){
            financialDetail=new CG_INT_BBAssistedRequestWrapper.CustomerFinancialDetails();
            financialDetail.latestFfDate  = CG_INT_Utility.getDateAsString(financialList[0].Statement_Period_Date__c); 
            financialDetail.loansInterest  =  CG_INT_Utility.getDecimalAsString(financialList[0].Interest_Paid_Loans_HP_O_D_s__c); 
            financialDetail.servicingSurplus  =  CG_INT_Utility.getDecimalAsString(financialList[0].FormSevicingSurplus__c); 
            financialDetail.shortTermLoansAndHp  =  CG_INT_Utility.getDecimalAsString(financialList[0].Short_Term_Loans_HP__c); 
            financialDetail.latestNetProfit  =  CG_INT_Utility.getDecimalAsString(financialList[0].Net_profit_after_Interest_before_Tax__c); 
        }
        return financialDetail;
    }
    /**
*  Description    Method to get facility details connected to account record.
*  @name          getAccountConnectedFacilityList   
*  @param          List<LLC_BI__Connection__c> accConList,Map<id,List<LLC_BI__Connection__c>> accConL1ListMap
*  @return        Map<Id,List<LLC_BI__Loan__c>>
*  @throws exception No
*/
    
    public  Map<Id,List<LLC_BI__Loan__c>> getAccountConnectedFacilityList ( List<LLC_BI__Connection__c> accConList,Map<id,List<LLC_BI__Connection__c>> accConL1ListMap){
        
        Map<id,Set<Id>> accConL2ListMap=new Map<Id,Set<Id>>();
        Map<id,Set<Id>> accConL3ListMap=new Map<Id,Set<Id>>();
        Set<Id> accConL1List=new Set<Id>();
        Set<Id> accConL2List=new Set<Id>();
        Set<Id> accConL3List=new Set<Id>();
        Map<id,Set<Id>> accConListMap=new Map<Id,Set<Id>>();
        Set<Id> allConId=new Set<Id>();
        Map<Id,Set<Id>> accConL1SetMap=new Map<Id,Set<Id>>();
        Map<Id,List<LLC_BI__Loan__c>> accConFacMap=new Map<Id,List<LLC_BI__Loan__c>>();
        Map<Id,List<LLC_BI__Loan__c>> conFacMap=new Map<Id,List<LLC_BI__Loan__c>>();
        
        for(LLC_BI__Connection__c con:accConList){
            if(accConL1SetMap.containsKey(con.LLC_BI__Connected_From__c) && accConL1SetMap.get(con.LLC_BI__Connected_From__c) != null) {
                Set<Id> conIdList = accConL1SetMap.get(con.LLC_BI__Connected_From__c);
                conIdList.add(con.LLC_BI__Connected_To__c);
                accConL1SetMap.put(con.LLC_BI__Connected_From__c,conIdList); 
            }   
            else {
                accConL1SetMap.put(con.LLC_BI__Connected_From__c,new Set<Id> {con.LLC_BI__Connected_To__c});
            }
            accConL1List.add(con.LLC_BI__Connected_To__c);
        }
        
        //fetch level 2 connections
        for(LLC_BI__Connection__c con:[ select id,LLC_BI__Connected_To__c,LLC_BI__Connected_From__c from  LLC_BI__Connection__c  where LLC_BI__Connected_From__c in: accConL1List and LLC_BI__Connection_Role__r.name IN :exposureRoleList]){
            
            if(accConL2ListMap.containsKey(con.LLC_BI__Connected_From__c) && accConL2ListMap.get(con.LLC_BI__Connected_From__c) != null) {
                Set<Id> conIdList = accConL2ListMap.get(con.LLC_BI__Connected_From__c);
                conIdList.add(con.LLC_BI__Connected_To__c);
                accConL2ListMap.put(con.LLC_BI__Connected_From__c,conIdList); 
            }   
            else {
                accConL2ListMap.put(con.LLC_BI__Connected_From__c,new Set<Id> {con.LLC_BI__Connected_To__c});
            }
            accConL2List.add(con.LLC_BI__Connected_To__c);
        }
        //fetch level 3 connections
        for(LLC_BI__Connection__c con:[ select id,LLC_BI__Connected_To__c,LLC_BI__Connected_From__c from  LLC_BI__Connection__c  where LLC_BI__Connected_From__c in: accConL2List and LLC_BI__Connection_Role__r.name IN :exposureRoleList]){
            
            if(accConL3ListMap.containsKey(con.LLC_BI__Connected_From__c) && accConL3ListMap.get(con.LLC_BI__Connected_From__c) != null) {
                Set<Id> conIdList = accConL3ListMap.get(con.LLC_BI__Connected_From__c);
                conIdList.add(con.LLC_BI__Connected_To__c);
                accConL3ListMap.put(con.LLC_BI__Connected_From__c,conIdList); 
            }   
            else {
                accConL3ListMap.put(con.LLC_BI__Connected_From__c,new Set<Id> {con.LLC_BI__Connected_To__c});
            }
            accConL3List.add(con.LLC_BI__Connected_To__c);
        }
        for(Id l1Id:accConL1SetMap.keySet()){
            Set<Id> conIdSet=new Set<Id>();
            if(null!=accConL1SetMap.get(l1Id)){
                conIdSet.addAll(accConL1SetMap.get(l1Id));
                for(Id l2Id:accConL1SetMap.get(l1Id)){
                    if(null!=accConL2ListMap.get(l2Id)){
                        conIdSet.addAll(accConL2ListMap.get(l2Id));
                        for(Id l3Id:accConL2ListMap.get(l2Id)){
                            if(null!=accConL3ListMap.get(l3Id)){
                                conIdSet.addAll(accConL3ListMap.get(l3Id));
                                
                            }
                        }
                    }
                }
            }
            if(conIdSet.size()>0){
                allConId.addAll(conIdSet);
                accConListMap.put(l1Id,conIdSet);
            }
        }
        for(Account acc :[select id,( select LLC_BI__Account__c,LLC_BI__Is_Secured__c,LLC_BI__IS_Modification__c,Action__c,SFG_Required__c,LLC_BI__Stage__c,Undrawn_Amount__c,LLC_BI__Principal_Balance__c,LLC_BI__Net_New_Funds__c,LLC_BI__Amount__c,LLC_BI__Product_Line__c,LLC_BI__Product_Type__c,LLC_BI__Product__c,Frequency__c from LLC_BI__Loans__r where LLC_BI__Stage__c!='Complete')
                          from account where Id in:allConId ]){
                              
                              if(acc.LLC_BI__Loans__r!=null &&acc.LLC_BI__Loans__r.size()>0){
                                  conFacMap.put(acc.id,acc.LLC_BI__Loans__r);
                              }
                          }
        for(Id accId:accConListMap.keySet()){
            for(Id conId:conFacMap.keySet()){
                if(accConListMap.get(accId).contains(conId)){
                    if(accConFacMap.containsKey(accId) && accConFacMap.get(accId) != null) {
                        accConFacMap.get(accId).addAll(conFacMap.get(conId));
                    }   
                    else {
                        accConFacMap.put(accId,conFacMap.get(conId));
                    }
                    
                }
            }
        }
        return accConFacMap;
    }
    /**
*  Description    Method to get exposure details.
*  @name          getExposures   
*  @param         String accntId
*  @return        CG_INT_BBAssistedRequestWrapper.Exposures
*  @throws exception No
*/
    public  CG_INT_BBAssistedRequestWrapper.Exposures getExposures(String accntId){
        system.debug('apiName -->'+apiName);
        List<String> proposedExposureCategoryList=new List<String>{'Proposal','Final Review','Manual Decision','Acceptance','Fulfilment','Booked'};
            List<String> primaryExposurePT=new List<String>{'Overdraft','Loan','Specialist Loan','Trade Finance',salesFinance};
                List<String> settlementExposurePT=new List<String>{'Settlement Limit','Cross Referral Settlement Limit'};
                    List<String> tradingExposurePT=new List<String>{'Spot & Forward Exchange Transactions'};
        Map<id,List<LLC_BI__Loan__c>> accFacList=new Map<Id,List<LLC_BI__Loan__c>>();
        Map<id,List<LLC_BI__Connection__c>> accConL1ListMap=new Map<Id,List<LLC_BI__Connection__c>>();
        List<LLC_BI__Connection__c> accConList=new List<LLC_BI__Connection__c>();
        Map<id,List<LLC_BI__Loan__c>> accConFacList=new Map<Id,List<LLC_BI__Loan__c>>();
        Set<Id> expsoureModLoanIdSet = new Set<Id>();
        Set<Id> exposureModParentLoanIdSet = new Set<Id>();
        List<List<LLC_BI__Loan__c>> allFacList=new List<List<LLC_BI__Loan__c>>();
        List<LLC_BI__Loan__c> facilityList=new List<LLC_BI__Loan__c>();
        Decimal totalExistingExposure=0;
        Decimal totalGoingForwardExposure=0; 
        Decimal assetFinanceExistingExposure=0;
        Decimal salesFinanceExistingExposure=0;
        Decimal loansExistingExposure=0;
        Decimal odExistingexposure=0;
        Decimal existingprimaryexposure=0, existingsettlementexposure=0, existingTradingexposure=0;
        Decimal goingforwardprimaryexposure=0, goingforwardsettlementexposure=0, goingforwardTradingexposure=0;
        Decimal odLimitsgoingforwardexposure=0;
        Decimal securedloansgoingforwardexposure=0;
        Decimal unsecuredloansgoingforwardexposure=0;
        Decimal unsecuredgoingforwardexposure=0;
        Decimal unsecuredexistingexposure=0;
        Decimal totalConnectedLoanExposure=0, totalConnectedMortgageExposure=0, totalConnectedOverdraftExposure=0, totalConnectedSettlementExposure=0;
        Decimal xrTotalConnectedAssetFinanceExposure=0, xrTotalConnectedOtherExposure=0, xrTotalConnectedSalesFinanceExposure=0, xrTotalConnectedSettlementExposure=0;
        Decimal connectedBusinessTotalExposure=0;
        
        //fetch all the facilities associated with the account id's
        for(Account acc :[select id,( select LLC_BI__Account__c,LLC_BI__Is_Secured__c,LLC_BI__IS_Modification__c,Action__c,SFG_Required__c,LLC_BI__Stage__c,LLC_BI__Principal_Balance__c,Undrawn_Amount__c,LLC_BI__Net_New_Funds__c,LLC_BI__Amount__c,LLC_BI__Product_Line__c,LLC_BI__Product_Type__c,LLC_BI__Product__c, Frequency__c from LLC_BI__Loans__r where LLC_BI__Stage__c!='Complete'),
                          (select Id, LLC_BI__Connected_To__c,LLC_BI__Connected_From__c from  LLC_BI__Connected_To__r where LLC_BI__Connection_Role__r.name IN :exposureRoleList)
                          from account where Id =:accntId ]){
                              
                              if(acc.LLC_BI__Loans__r!=null &&acc.LLC_BI__Loans__r.size()>0){
                                  accFacList.put(acc.id,acc.LLC_BI__Loans__r);
                              }
                              if(acc.LLC_BI__Connected_To__r!=null &&acc.LLC_BI__Connected_To__r.size()>0){
                                  
                                  accConL1ListMap.put(acc.id,acc.LLC_BI__Connected_To__r);
                                  accConList.addAll(acc.LLC_BI__Connected_To__r);
                              }
                          }
        if(accConList.size()>0){
            accConFacList=getAccountConnectedFacilityList(accConList,accConL1ListMap);
        }
        allFacList.addAll(accFacList.values());
        allFacList.addAll(accConFacList.values());
        for(List<LLC_BI__Loan__c> loanList:allFacList){
            facilityList.addAll(loanList);
            
        }
        for(LLC_BI__Loan__c loan:facilityList){
            if(loan.LLC_BI__Stage__c!='Booked' && loan.LLC_BI__Is_Modification__c==true){
                
                    expsoureModLoanIdSet.add(loan.id);
            }
        }
        if(expsoureModLoanIdSet.size()>0){
            for(LLC_BI__LoanRenewal__c modLoan : [Select id,LLC_BI__RenewalLoanId__c,LLC_BI__ParentLoanId__c from LLC_BI__LoanRenewal__c where LLC_BI__RenewalLoanId__c=:expsoureModLoanIdSet ]){
                if(modLoan.LLC_BI__ParentLoanId__c!=null) exposureModParentLoanIdSet.add(modLoan.LLC_BI__ParentLoanId__c);
            }
        }
        
        
        if(accFacList.size()>0){
            for(LLC_BI__Loan__c loanRec:accFacList.get(accntId)){
                if(loanRec.LLC_BI__Amount__c==null) loanRec.LLC_BI__Amount__c=0;
                if(loanRec.LLC_BI__Principal_Balance__c==null) loanRec.LLC_BI__Principal_Balance__c=0;
                if(loanRec.LLC_BI__Net_New_Funds__c==null) loanRec.LLC_BI__Net_New_Funds__c=0;
                if(loanRec.Undrawn_Amount__c==null) loanRec.Undrawn_Amount__c=0;
                //ATHN-760     
                if((loanRec.LLC_BI__Product__c=='BACS' ||loanRec.LLC_BI__Product__c=='Payflow')&&loanRec.Frequency__c=='Daily'&&loanRec.LLC_BI__Amount__c!=null){
                    loanRec.LLC_BI__Amount__c=2*loanRec.LLC_BI__Amount__c;
                } 
                if(loanRec.LLC_BI__Stage__c=='Booked'){
                    if(loanRec.LLC_BI__Product_Type__c=='Loan' ||loanRec.LLC_BI__Product_Type__c=='Specialist Loan'){
                        Decimal amount=loanRec.LLC_BI__Principal_Balance__c+loanRec.Undrawn_Amount__c;
                        totalExistingExposure=totalExistingExposure+amount;
                        if(!loanRec.LLC_BI__Is_Secured__c&&!loanRec.SFG_Required__c){
                            unsecuredexistingexposure=unsecuredexistingexposure+amount;
                        }
                        existingprimaryexposure=existingprimaryexposure+amount;
                        loansExistingExposure=loansExistingExposure+amount;
                    }
                    else{
                        totalExistingExposure=totalExistingExposure+loanRec.LLC_BI__Amount__c;
                        if(!loanRec.LLC_BI__Is_Secured__c&&!loanRec.SFG_Required__c){
                            unsecuredexistingexposure=unsecuredexistingexposure+loanRec.LLC_BI__Amount__c;
                        }
                        //product type wise
                        if(loanRec.LLC_BI__Product_Type__c=='Asset Finance')
                            assetFinanceExistingExposure=assetFinanceExistingExposure+loanRec.LLC_BI__Amount__c;
                        if(loanRec.LLC_BI__Product_Type__c==salesFinance)
                            salesFinanceExistingExposure=salesFinanceExistingExposure+loanRec.LLC_BI__Amount__c;
                        if(loanRec.LLC_BI__Product_Type__c=='Overdraft')
                            odExistingexposure=odExistingexposure+loanRec.LLC_BI__Amount__c;
                        // category wise
                        if(primaryExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                            existingprimaryexposure=existingprimaryexposure+loanRec.LLC_BI__Amount__c;
                        if(settlementExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                            existingsettlementexposure=existingsettlementexposure+loanRec.LLC_BI__Amount__c;
                        if(tradingExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                            existingTradingexposure=existingTradingexposure+loanRec.LLC_BI__Amount__c;
                        
                    } 
                }
                // if its modification avaialble dont add the parent booked facility in the below calcualiton
                
                    if(proposedExposureCategoryList.contains(loanRec.LLC_BI__Stage__c) && (exposureModParentLoanIdSet.isEmpty()||!exposureModParentLoanIdSet.contains(loanRec.id))){
                        if(loanRec.LLC_BI__Product_Type__c=='Loan' ||loanRec.LLC_BI__Product_Type__c=='Specialist Loan'){
                            Decimal amount=loanRec.LLC_BI__Amount__c;
                            if(loanRec.LLC_BI__Stage__c =='Booked'|| (loanRec.LLC_BI__IS_Modification__c==true&&loanRec.Action__c!= partialPayoff
                                                                      &&loanRec.Action__c!=fullPayoff)){
                                                                          amount=loanRec.LLC_BI__Principal_Balance__c+loanRec.Undrawn_Amount__c;
                                                                      }
                            
                            totalGoingForwardExposure=totalGoingForwardExposure+amount;
                            goingforwardprimaryexposure=goingforwardprimaryexposure+amount;
                            if(loanRec.LLC_BI__Is_Secured__c||loanRec.SFG_Required__c){
                                securedloansgoingforwardexposure=securedloansgoingforwardexposure+amount;
                            }
                            else {
                                unsecuredloansgoingforwardexposure=unsecuredloansgoingforwardexposure+amount;
                                unsecuredgoingforwardexposure=unsecuredgoingforwardexposure+amount;
                            }
                            
                        }
                        else{
                            
                            totalGoingForwardExposure=totalGoingForwardExposure+loanRec.LLC_BI__Amount__c;
                            //category wise
                            if(primaryExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                                goingforwardprimaryexposure=goingforwardprimaryexposure+loanRec.LLC_BI__Amount__c;
                            if(settlementExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                                goingforwardsettlementexposure=goingforwardsettlementexposure+loanRec.LLC_BI__Amount__c;
                            if(tradingExposurePT.contains(loanRec.LLC_BI__Product_Type__c))
                                goingforwardTradingexposure=goingforwardTradingexposure+loanRec.LLC_BI__Amount__c;
                            if(!loanRec.LLC_BI__Is_Secured__c&&!loanRec.SFG_Required__c)
                                unsecuredgoingforwardexposure=unsecuredgoingforwardexposure+loanRec.LLC_BI__Amount__c;
                            
                            if(loanRec.LLC_BI__Product_Type__c=='Overdraft')
                                odLimitsgoingforwardexposure=odLimitsgoingforwardexposure+loanRec.LLC_BI__Amount__c;
                        }
                    }
                
                //category wise incremental
                        
                
            }
        }
        //Connected facilities
        if(accConFacList.size()>0&&accConFacList.containskey(accntId)){
            for(LLC_BI__Loan__c conLoanRec:accConFacList.get(accntId)){
                    if(conLoanRec.LLC_BI__Account__c!=accntId && (exposureModParentLoanIdSet.isEmpty()||!exposureModParentLoanIdSet.contains(conLoanRec.id))){
                        if(conLoanRec.LLC_BI__Amount__c==null) conLoanRec.LLC_BI__Amount__c=0;
                        
                        if(conLoanRec.LLC_BI__Principal_Balance__c==null) conLoanRec.LLC_BI__Principal_Balance__c=0;
                        if(conLoanRec.LLC_BI__Net_New_Funds__c==null) conLoanRec.LLC_BI__Net_New_Funds__c=0;
                        if(conLoanRec.Undrawn_Amount__c==null) conLoanRec.Undrawn_Amount__c=0;

                        if(conLoanRec.LLC_BI__Product_Type__c=='Loan'||conLoanRec.LLC_BI__Product_Type__c=='Specialist Loan'){
                            Decimal amount=conLoanRec.LLC_BI__Amount__c;
                            if(conLoanRec.LLC_BI__Stage__c =='Booked'|| (conLoanRec.LLC_BI__Is_Modification__c==true&&conLoanRec.Action__c!=partialPayoff &&conLoanRec.Action__c!=fullPayoff)){
                                amount=conLoanRec.LLC_BI__Principal_Balance__c+conLoanRec.Undrawn_Amount__c;
                            }
                            if(conLoanRec.LLC_BI__Product__c=='Commercial Mortgage'||conLoanRec.LLC_BI__Product__c=='Agricultural Mortgage'){
                                
                                totalConnectedMortgageExposure=totalConnectedMortgageExposure+amount;
                            }
                            else{
                                totalConnectedLoanExposure=totalConnectedLoanExposure+amount;
                            }

                            connectedBusinessTotalExposure=connectedBusinessTotalExposure+amount;
                        }
                        else{
                             //ATHN-760  
                            if((conLoanRec.LLC_BI__Product__c=='BACS' ||conLoanRec.LLC_BI__Product__c=='Payflow')&&conLoanRec.Frequency__c=='Daily'&&conLoanRec.LLC_BI__Amount__c!=null){
                            conLoanRec.LLC_BI__Amount__c=2*conLoanRec.LLC_BI__Amount__c;
                        } 
                       
                        if(conLoanRec.LLC_BI__Product_Type__c=='Asset Finance'){
                            xrTotalConnectedAssetFinanceExposure=xrTotalConnectedAssetFinanceExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        
                        if(conLoanRec.LLC_BI__Product_Type__c=='Spot & Forward Exchange Transactions'||conLoanRec.LLC_BI__Product_Type__c=='Trade Finance'){
                            xrTotalConnectedOtherExposure=xrTotalConnectedOtherExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        if(conLoanRec.LLC_BI__Product_Type__c=='Overdraft'){
                            totalConnectedOverdraftExposure=totalConnectedOverdraftExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        if(conLoanRec.LLC_BI__Product_Type__c==salesFinance){
                            xrTotalConnectedSalesFinanceExposure=xrTotalConnectedSalesFinanceExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        if(conLoanRec.LLC_BI__Product_Type__c=='Settlement Limit'){
                            totalConnectedSettlementExposure=totalConnectedSettlementExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        if(conLoanRec.LLC_BI__Product__c=='Spot & Forward Exchange Transaction (Settlement)'){
                            xrTotalConnectedSettlementExposure=xrTotalConnectedSettlementExposure+conLoanRec.LLC_BI__Amount__c;
                        }
                        connectedBusinessTotalExposure=connectedBusinessTotalExposure+conLoanRec.LLC_BI__Amount__c;
                    }
                        
                  }
                
            }
        }
        
        
        CG_INT_BBAssistedRequestWrapper.AggregatedExposures exposureDetails=new CG_INT_BBAssistedRequestWrapper.AggregatedExposures();
        
        exposureDetails.overdraftExposureProposed  = CG_INT_Utility.getDecimalAsStringNonZero(odLimitsgoingforwardexposure);  
        exposureDetails.securedLoanExposureProposed  = CG_INT_Utility.getDecimalAsStringNonZero(securedloansgoingforwardexposure);
        exposureDetails.unsecuredExposureProposed  = CG_INT_Utility.getDecimalAsStringNonZero(unsecuredgoingforwardexposure); // to be used for unsecured exposure proposed
        exposureDetails.overallExposureProposed  = CG_INT_Utility.getDecimalAsStringNonZero(totalGoingForwardExposure);
        
        exposureDetails.totalExistingExposure = CG_INT_Utility.getDecimalAsStringNonZero(totalExistingExposure);
        exposureDetails.assetFinanceExposureExisting  = CG_INT_Utility.getDecimalAsStringNonZero(assetFinanceExistingExposure);
        exposureDetails.odExistingexposure = CG_INT_Utility.getDecimalAsStringNonZero(odExistingexposure);
        exposureDetails.salesFinanceExposureExisting  = CG_INT_Utility.getDecimalAsStringNonZero(salesFinanceExistingExposure);
        exposureDetails.loansExposureExisting = CG_INT_Utility.getDecimalAsStringNonZero(loansExistingExposure);
        
        if(apiName=='lendingDecisions'){
            exposureDetails.primaryExposureProposed = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardprimaryexposure);   
            exposureDetails.tradingExposureProposed = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardTradingexposure);   
            exposureDetails.settlementExposureProposed = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardsettlementexposure);   
            
            exposureDetails.primaryExposureExisting = CG_INT_Utility.getDecimalAsStringNonZero(existingprimaryexposure);   
            exposureDetails.tradingExposureExisting = CG_INT_Utility.getDecimalAsStringNonZero(existingTradingexposure);   
            exposureDetails.settlementExposureExisting = CG_INT_Utility.getDecimalAsStringNonZero(existingsettlementexposure);
            
            exposureDetails.primaryExposureIncrease = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardprimaryexposure-existingprimaryexposure);   
            exposureDetails.tradingExposureIncrease = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardTradingexposure-existingTradingexposure);   
            exposureDetails.settlementExposureIncrease = CG_INT_Utility.getDecimalAsStringNonZero(goingforwardsettlementexposure-existingsettlementexposure);   
            
            
            exposureDetails.unsecuredExistingExposure = CG_INT_Utility.getDecimalAsStringNonZero(unsecuredexistingexposure);  
            exposureDetails.unsecuredLoanExposureProposed = CG_INT_Utility.getDecimalAsStringNonZero(unsecuredloansgoingforwardexposure);    
        }
        
        CG_INT_BBAssistedRequestWrapper.ConnectedExistingExposure conExpDetails=new CG_INT_BBAssistedRequestWrapper.ConnectedExistingExposure();
        conExpDetails.totalLoanExposure  = CG_INT_Utility.getDecimalAsStringNonZero(totalConnectedLoanExposure);
        conExpDetails.totalMortgageExposure  = CG_INT_Utility.getDecimalAsStringNonZero(totalConnectedMortgageExposure);
        conExpDetails.totalOverdraftExposure  = CG_INT_Utility.getDecimalAsStringNonZero(totalConnectedOverdraftExposure);
        conExpDetails.totalSettlementExposure  = CG_INT_Utility.getDecimalAsStringNonZero(totalConnectedSettlementExposure);
        conExpDetails.totalXrAssetFinanceExposure  = CG_INT_Utility.getDecimalAsStringNonZero(xrTotalConnectedAssetFinanceExposure);
        conExpDetails.totalXrSalesFinanceExposure  = CG_INT_Utility.getDecimalAsStringNonZero(xrTotalConnectedSalesFinanceExposure);
        conExpDetails.totalXrOtherExposure  = CG_INT_Utility.getDecimalAsStringNonZero(xrTotalConnectedOtherExposure);
        conExpDetails.totalXrSettlementExposure  = CG_INT_Utility.getDecimalAsStringNonZero(xrTotalConnectedSettlementExposure);
        conExpDetails.totalExposure  = CG_INT_Utility.getDecimalAsStringNonZero(connectedBusinessTotalExposure);  
        
        return new CG_INT_BBAssistedRequestWrapper.Exposures(exposureDetails,conExpDetails);
    }
    /**
*  Description    Method to get director details.
*  @name          getDirectors   
*  @param         Map<Id,LLC_BI__Connection__c> directorMap,String creditId,Map<String,Contact> indConnContactMap
*  @return        List<CG_INT_BBAssistedRequestWrapper.Directors>
*  @throws exception No
*/
    public  List<CG_INT_BBAssistedRequestWrapper.Directors> getDirectors(Map<Id,LLC_BI__Connection__c> directorMap,String creditId,Map<String,Contact> indConnContactMap){
        
        List<CG_INT_BBAssistedRequestWrapper.Directors> directorsList=new List<CG_INT_BBAssistedRequestWrapper.Directors>();
        Map<Id,List<CG_INT_BBAssistedRequestWrapper.Address>> directorAddressesMap=new Map<Id,List<CG_INT_BBAssistedRequestWrapper.Address>>();
        Set<Id> dirWithNoEndDate=new Set<Id>();
        
        if(!directorMap.isEmpty()) {
            for(Previous_Residential_Address__c resAdd:[select Contact_Id__c,Contact_Id__r.Contact_ID__c,Contact_Id__r.Contact_Address_Start_Date__c,Contact_Id__r.LastName,Contact_Id__r.FirstName,Organisation__r.First_Name__c,Organisation__r.Last_Name__c,Contact_Address_Type_Previous_Address__c,Contact_Previous_Residential_Status__c,Previous_Residential_Address__c,
                                                        Address_Start_Date__c,Address_End_Date__c,Address_Line_1__c,Address_Line_2__c,Address_Line_3__c,
                                                        Address_Line_4__c,Address_Line_5__c,Address_Line_6__c,Postcode__c,Contact_Previous_Address_Country__c from Previous_Residential_Address__c
                                                        where Contact_Id__r.Contact_ID__c in : indConnContactMap.keySet() order by Contact_Id__r.Contact_ID__c,Address_Start_Date__c desc,Address_End_Date__c desc]){
                                                            String dirName=resAdd.Contact_Id__r.LastName+':'+resAdd.Contact_Id__r.FirstName;
                                                            String rdsAddressType='F';
                                                            String rdsCountry;
                                                            String rdsResStatus;
                                                            if(resAdd.Contact_Address_Type_Previous_Address__c!=null&&addressTypeMap.containsKey(resAdd.Contact_Address_Type_Previous_Address__c)){
                                                                rdsAddressType=addressTypeMap.get(resAdd.Contact_Address_Type_Previous_Address__c);
                                                            }
                                                            
                                                            if(rdsAddressType=='U') {rdsCountry='GBR';}
                                                            
                                                            if(resAdd.Contact_Previous_Residential_Status__c!=null&&residentialStatusMap.containsKey(resAdd.Contact_Previous_Residential_Status__c)){
                                                                rdsResStatus=resAdd.Contact_Previous_Residential_Status__c;
                                                            }
                                                            // directorAddressesMap
                                                            if(directorAddressesMap.containsKey(resAdd.Contact_Id__c) && directorAddressesMap.get(resAdd.Contact_Id__c) != null) {
                                                                List<CG_INT_BBAssistedRequestWrapper.Address> resAddList = directorAddressesMap.get(resAdd.Contact_Id__c);
                                                                if(resAddList.size()<2){
                                                                    CG_INT_BBAssistedRequestWrapper.Address resAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                                                                    
                                                                    resAddress.addressLines = CG_INT_Utility.getAddressLinesAsList(resAdd.Address_Line_1__c,resAdd.Address_Line_2__c,resAdd.Address_Line_3__c,resAdd.Address_Line_4__c,resAdd.Address_Line_5__c,resAdd.Address_Line_6__c); 
                                                                    
                                                                    resAddress.postCode = resAdd.PostCode__c; 
                                                                    
                                                                    resAddress.addressType =rdsAddressType;  //transforamtion needed
                                                                    resAddress.addressEndDate = CG_INT_Utility.getDateAsString(resAdd.Address_End_Date__c); 
                                                                    if(resAddress.addressEndDate==null){
                                                                        dirWithNoEndDate.add(resAdd.Contact_Id__c);
                                                                    } 
                                                                    resAddress.country = rdsCountry;
                                                                    resAddress.addressStartDate = CG_INT_Utility.getDateAsString(resAdd.Address_Start_Date__c); 
                                                                    resAddress.residentialStatus =rdsResStatus;
                                                                    resAddList.add(resAddress);
                                                                    directorAddressesMap.put(resAdd.Contact_Id__c,resAddList); 
                                                                }
                                                            }   
                                                            else {
                                                                CG_INT_BBAssistedRequestWrapper.Address resAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                                                                resAddress.addressLines = CG_INT_Utility.getAddressLinesAsList(resAdd.Address_Line_1__c,resAdd.Address_Line_2__c,resAdd.Address_Line_3__c,resAdd.Address_Line_4__c,resAdd.Address_Line_5__c,resAdd.Address_Line_6__c); 
                                                                resAddress.postCode = resAdd.PostCode__c; 
                                                                resAddress.addressType = rdsAddressType; //transforamtion needed
                                                                resAddress.addressEndDate = CG_INT_Utility.getDateAsString(resAdd.Address_End_Date__c);  
                                                                if(resAddress.addressEndDate==null){
                                                                    dirWithNoEndDate.add(resAdd.Contact_Id__c);
                                                                } 
                                                                resAddress.country = rdsCountry;
                                                                resAddress.addressStartDate = CG_INT_Utility.getDateAsString(resAdd.Address_Start_Date__c);  
                                                                resAddress.residentialStatus = rdsResStatus;
                                                                
                                                                directorAddressesMap.put(resAdd.Contact_Id__c,new List<CG_INT_BBAssistedRequestWrapper.Address> {resAddress});
                                                            }
                                                            if(rdsAddressType!='F'&&resAdd.PostCode__c==null){  mandatoryErrorList.add('Post code is required for Address of '+dirName);} 
                                                            if(rdsAddressType!='F'&&resAdd.Contact_Address_Type_Previous_Address__c==null){  mandatoryErrorList.add('Address Type is required for Address of '+dirName);} 
                                                            if(resAdd.Address_Start_Date__c==null){  mandatoryErrorList.add('Address Start date is required for Address of '+dirName);} 
                                                            //added below if for GRPCONLEND-22797
                                                            if(date.today()<Date.valueOf(resAdd.Contact_Id__r.Contact_Address_Start_Date__c).addYears(3)){
                                                           
                                                            if(resAdd.Address_Start_Date__c != null && resAdd.Contact_Id__r.Contact_Address_Start_Date__c != null
                                                              && resAdd.Contact_Id__r.Contact_Address_Start_Date__c <= resAdd.Address_Start_Date__c){mandatoryErrorList.add('Please review the address residency dates of the '+dirName+' before proceeding further');} 
                                                              }                                                     
                                                            
                                                            
                                                            
                                                        }
            for(LLC_BI__Connection__c con:directorMap.values()){
                CG_INT_BBAssistedRequestWrapper.Directors dir=new CG_INT_BBAssistedRequestWrapper.Directors();
                List<CG_INT_BBAssistedRequestWrapper.Telephone> telephoneList=new List<CG_INT_BBAssistedRequestWrapper.Telephone>();
                if(con.LLC_BI__Connected_To__r.Customer_ID__c!=null){  dir.customerId= con.LLC_BI__Connected_To__r.Customer_ID__c;} 
                else { mandatoryErrorList.add('Customer Id is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);}
                
                if(indConnContactMap.containsKey(con.LLC_BI__Connected_To__r.Customer_ID__c)){
                    Contact contct=indConnContactMap.get(con.LLC_BI__Connected_To__r.Customer_ID__c);
                    
                    dir.title= contct.Title;
                    
                    dir.firstName= contct.FirstName;
                    if(dir.firstName==null){ mandatoryErrorList.add('First Name is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);}
                    
                    dir.middleName= contct.MiddleName;
                   
                    dir.lastName= contct.LastName;
                    if(dir.lastName==null){ mandatoryErrorList.add('Last Name is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);}
                    
                    dir.mobileNumber= contct.MobilePhone!=null?(contct.MobilePhone).replaceAll( '\\s+', ''):null;
                    
                    dir.emailAddress= contct.Email_Address__c;
                   
                    dir.dateOfBirth= CG_INT_Utility.getDateAsString(contct.Birthdate);
                    if(dir.dateOfBirth==null){ mandatoryErrorList.add('Date of Birth is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);}
                    //GRPCONLEND-21618
                    if(contct.Gender__c=='U') {
                        contct.Gender__c='Z';
                    }
                    dir.gender= contct.Gender__c;
                    dir.btaCode = contct.BTA_Code__c;
                    // get current address Start
                    
                    String rdsCurrentAddressType='F';
                    String rdsCurrentCountry;
                    String rdsCurrentResStatus;
                    if(contct.Address_Type_Current_Address__c!=null&&addressTypeMap.containsKey(contct.Address_Type_Current_Address__c)){
                        rdsCurrentAddressType=addressTypeMap.get(contct.Address_Type_Current_Address__c);
                    }
                    
                    if(rdsCurrentAddressType=='U') {rdsCurrentCountry='GBR';}
                    if(contct.Contact_Current_Residential_Status__c!=null&&residentialStatusMap.containsKey(contct.Contact_Current_Residential_Status__c)){
                        rdsCurrentResStatus=contct.Contact_Current_Residential_Status__c;
                    }
                    CG_INT_BBAssistedRequestWrapper.Address currentResAddress=null;
                    if(contct.Address_Line_1__c!=null ||contct.Address_Line_2__c!=null ||contct.Address_Line_3__c!=null ||contct.Address_Line_4__c!=null ||contct.Address_Line_5__c!=null ||contct.Address_Line_6__c!=null){
                        currentResAddress=new CG_INT_BBAssistedRequestWrapper.Address();
                        currentResAddress.addressLines = CG_INT_Utility.getAddressLinesAsList(contct.Address_Line_1__c,contct.Address_Line_2__c,contct.Address_Line_3__c,contct.Address_Line_4__c,contct.Address_Line_5__c,contct.Address_Line_6__c); 
                        currentResAddress.postCode = contct.Post_Code__c; 
                        currentResAddress.addressType = rdsCurrentAddressType; //transforamtion needed
                        currentResAddress.country = rdsCurrentCountry; 
                        currentResAddress.addressStartDate = CG_INT_Utility.getDateAsString(contct.Contact_Address_Start_Date__c);  
                        currentResAddress.residentialStatus = rdsCurrentResStatus;
                        
                        if(rdsCurrentAddressType!='F'&&currentResAddress.postCode==null){  mandatoryErrorList.add('Post code is required for Current Address of '+contct.lastname+''+contct.FirstName);} 
                        if(currentResAddress.addressType==null){  mandatoryErrorList.add('Address Type is required for Current Address of '+contct.lastname+''+contct.FirstName);} 
                        if(currentResAddress.addressStartDate==null){  mandatoryErrorList.add('Address Start date is required for Current Address of '+contct.lastname+''+contct.FirstName);} 
                        
                    }
                    
                    //get Current address end
                    if(currentResAddress!=null) {
                        dir.addresses=new List<CG_INT_BBAssistedRequestWrapper.Address>{currentResAddress};
                            }
                    
                    if(directorAddressesMap.containsKey(contct.id)&&directorAddressesMap.get(contct.id)!=null){
                        if(dir.addresses!=null){
                            dir.addresses.addAll(directorAddressesMap.get(contct.id));
                        }
                        else {
                            dir.addresses=directorAddressesMap.get(contct.id);
                        }
                        // try to sort the addesses
                        if(dir.addresses!=null&&dir.addresses.size()>0){
                            dir.addresses=getSortedAddressList(dir.addresses);
                        }
                    }
                    if(dir.addresses==null ||(dir.addresses!=null && dir.addresses.size()==0))
                    {mandatoryErrorList.add('Address is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);}
                    if(contct.HomePhone!=null){
                        telephoneList.add(getTelephoneValue('HOM',contct.HomePhone));
                    }
                    if(contct.MobilePhone!=null){
                        telephoneList.add(getTelephoneValue('MOB',contct.MobilePhone));
                    }
                    if(contct.Phone!=null){
                        telephoneList.add(getTelephoneValue('WOR',contct.Phone));
                    }
                    
                }
                else{
                    mandatoryErrorList.add('FirsName,LastName,Date of Birth is required for '+con.LLC_BI__Connection_Role__r.name+' '+con.LLC_BI__Connected_To__r.Name);
                }
                // for  FCA and BPAL
                if(directorConsetMap.containsKey(con.LLC_BI__Connected_To__c)&&directorConsetMap.get(con.LLC_BI__Connected_To__c)!=null){
                    if(directorMap.values().size()>3){
                        dir.consentForBureauSearch= 'N';
                    }
                    else{
                        dir.consentForBureauSearch= (directorConsetMap.get(con.LLC_BI__Connected_To__c)?'Y':'N');
                    }
                    
                }
                else{
                    dir.consentForBureauSearch= 'N'; // except for FCA and BPAL
                }
                
                // only for decision
                if(apiName=='lendingDecisions'){
                    // for  FCA and BPAL
                    if(directorFraudMap.containsKey(con.LLC_BI__Connected_To__c)&&directorFraudMap.get(con.LLC_BI__Connected_To__c)!=null){
                        if(directorMap.values().size()>3){
                            dir.fraudAttestation= (directorFraudMap.get(con.LLC_BI__Connected_To__c)?'Y':'N');
                        }
                        else{
                            dir.fraudAttestation= (directorConsetMap.get(con.LLC_BI__Connected_To__c)?'Y':'N');
                        }
                    } 
                    else{
                        dir.fraudAttestation= 'N'; // except for  FCA and BPAL
                    }                
                    
                 
                    // Business - Mobile__c (MOB), Phone__c  (BUS)
                    //Indivudal : HomePhone (HOM), MobilePhone (MOB), Phone (Work)  (WOR)
                    if(telephoneList.size()>0){
                        dir.telephone=telephoneList;
                    }
                    
                }
                directorsList.add(dir);
            }
        }
        return directorsList;
    }
    /**
*  Description    Method to get LLC_BI__Collateral__c details.
*  @name          getSecurities   
*  @param         List<LLC_BI__Collateral__c> existingsecurityList,List<New_Collateral__c> newSecurityList
*  @return        List<CG_INT_BBAssistedRequestWrapper.Security>
*  @throws exception No
*/
    public   List<CG_INT_BBAssistedRequestWrapper.Security> getSecurities( List<LLC_BI__Collateral__c> existingsecurityList,List<New_Collateral__c> newSecurityList,Map<Id,Decimal> sfgLoanIdAmountMap ){
        List<CG_INT_BBAssistedRequestWrapper.Security> securitiesList=new List<CG_INT_BBAssistedRequestWrapper.Security>(); 
        for(LLC_BI__Collateral__c collateral:existingsecurityList){
            if(collateral!=null&&securitiesList!=null&&securitiesList.size()<=40&&collateral.LLC_BI__Parent_Collateral__c==null){
                CG_INT_BBAssistedRequestWrapper.Security security=new CG_INT_BBAssistedRequestWrapper.Security();  
                security.securityId =collateral.Name; 
                security.securityType = collateral.RDS_Collateral_Code_New__c;  
                //GRPCONLEND-21892  proposed subtype and proposed charge priority for Land type
                if(collateral.LLC_BI__Collateral_Type__r.LLC_BI__Type__c=='Land'){
                    if(collateral.Proposed_Collateral_SubType__c!=null&&collateral.Proposed_Charge_Priority__c!=null&&collateral.Proposed_Charge_Priority__c=='1'){
                    
                     security.securityType = '5';
                    }
                    else if(collateral.Proposed_Collateral_SubType__c!=null&&collateral.Proposed_Charge_Priority__c!=null&&collateral.Proposed_Charge_Priority__c!='1'){
                  
                     security.securityType = '6';
                    } 
                    else if(collateral.Proposed_Collateral_SubType__c!=null&&collateral.Proposed_Charge_Priority__c==null&&collateral.Charge_Priority__c=='1'){
                    
                     security.securityType = '5';
                    }
                    else if(collateral.Proposed_Collateral_SubType__c!=null&&collateral.Proposed_Charge_Priority__c==null&&collateral.Charge_Priority__c!='1'){
                  
                     security.securityType = '6';
                    } 
                     else if(collateral.Proposed_Collateral_SubType__c==null&&collateral.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c!='Other'&&collateral.Proposed_Charge_Priority__c!=null&&collateral.Proposed_Charge_Priority__c=='1'){
                    
                     security.securityType = '5';
                    }
                    else if(collateral.Proposed_Collateral_SubType__c==null&&collateral.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c!='Other'&&collateral.Proposed_Charge_Priority__c!=null&&collateral.Proposed_Charge_Priority__c!='1'){
                    
                     security.securityType = '6';
                    }
                }
                if(isSupportingSet.contains(collateral.id)&&collateral.LLC_BI__Collateral_Type__r.LLC_BI__Type__c!=Cross_and_Debenture &&collateral.LLC_BI__Collateral_Type__r.LLC_BI__Subtype__c!='CROSS GUARANTEE'){
                    security.supportingSecurityIndicator = 'Y';
                }
                if(isSupportedSet.contains(collateral.id)){
                    security.supportedSecurityIndicator = 'Y';
                }
                security.releaseSecurity = CG_INT_Utility.getYesNo(collateral.Release_Security_New__c);
                security.existingSecurityIndicator = 'Y'; 
                if(collateral.LLC_BI__Value__c!=null || collateral.Proposed_Value__c!=null){ 
                    security.value = collateral.Proposed_Value__c!=null?new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Proposed_Value__c):new CG_INT_BBAssistedRequestWrapper.Amount(collateral.LLC_BI__Value__c);
                } 
                else { 
                    security.value = new CG_INT_BBAssistedRequestWrapper.Amount(0.00);
                }
                
                //modified for GRPCONLEND-24904?
                if(collateral.Prior_Charges__c != NULL &&  collateral.Proposed_Prior_charges__c == NULL){
                     security.priorChargeValue = new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Prior_Charges__c);
                }  else if (collateral.Proposed_Prior_charges__c != NULL &&  collateral.Prior_Charges__c == NULL){
                    security.priorChargeValue = new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Proposed_Prior_charges__c);
                } else if (collateral.Prior_Charges__c != NULL &&  collateral.Proposed_Prior_charges__c != NULL){
                    security.priorChargeValue = new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Proposed_Prior_charges__c);
                } else if (collateral.Prior_Charges__c == NULL &&  collateral.Proposed_Prior_charges__c == NULL){
                    security.priorChargeValue = NULL;
                }
                
                if(securitiesList.size()==0){
                    security.alsoSecuresValue  =creditApp.Proposed_Also_Secures_Value__c!=null?new CG_INT_BBAssistedRequestWrapper.Amount(creditApp.Proposed_Also_Secures_Value__c):null; 
                }
              
                securitiesList.add(security);}
        }
        
        for(New_Collateral__c collateral:newSecurityList){
            if(collateral!=null&&securitiesList!=null&&securitiesList.size()<=40){
                CG_INT_BBAssistedRequestWrapper.Security security=new CG_INT_BBAssistedRequestWrapper.Security();    
                if(collateral.Record_Complete_NC__c!=true) mandatoryErrorList.add('Security Record must be completed for '+collateral.Name);
                security.securityId = collateral.Name; 
                security.securityType = collateral.RDS_Collateral_Code__c; 
                if(isSupportingSet.contains(collateral.id)&&collateral.Collateral_Type_NC__c!=Cross_and_Debenture &&collateral.Collateral_Subtype_NC__c!='Cross Guarantee'){
                    security.supportingSecurityIndicator = 'Y';}
                if(isSupportedSet.contains(collateral.id)){ 
                    security.supportedSecurityIndicator ='Y';} 
                if(collateral.Collateral_Status__c=='Offered'){ 
                    security.existingSecurityIndicator ='N';
                } 
                else{ 
                    security.existingSecurityIndicator ='Y';
                }
                
                if(collateral.Value_NC__c!=null){
                    security.value = new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Value_NC__c);
                }
                else { 
                    mandatoryErrorList.add('Security value is required for '+collateral.Name);
                }
                
                security.priorChargeValue =collateral.Prior_Charges_NC__c!=null ?new CG_INT_BBAssistedRequestWrapper.Amount(collateral.Prior_Charges_NC__c):null; 
                
                if(securitiesList.size()==0){
                    security.alsoSecuresValue  =creditApp.Proposed_Also_Secures_Value__c!=null?new CG_INT_BBAssistedRequestWrapper.Amount(creditApp.Proposed_Also_Secures_Value__c):null; 
                }
                
                        if(apiName=='lendingDecisions' && (collateral.Collateral_Type_NC__c=='Land' && (collateral.Address_line_1__c!=null ||collateral.Address_line_2__c!=null ||collateral.Address_line_3__c!=null ||collateral.Address_line_4__c!=null ||collateral.Address_line_5__c!=null ||collateral.Address_line_6__c!=null))){
                            CG_INT_BBAssistedRequestWrapper.Address securityAddress=new CG_INT_BBAssistedRequestWrapper.Address();  
                            securityAddress.addressType='U';
                            securityAddress.addressLines=CG_INT_Utility.getAddressLinesAsList(collateral.Address_line_1__c,collateral.Address_line_2__c,collateral.Address_line_3__c,collateral.Address_line_4__c,collateral.Address_line_5__c,collateral.Address_line_6__c);
                            securityAddress.country= 'GBR';
                            if(collateral.Post_Code_NC__c==null){
                                mandatoryErrorList.add('New Security Address Postcode is required for '+collateral.Name);
                            }
                            securityAddress.postCode=collateral.Post_Code_NC__c;
                            security.address=securityAddress;
                        }
                    
                
                securitiesList.add(security);}
        }
        //GRPCONLEND-21691 SFG collateral block to be sent if facility is secured by SFG
        if(!sfgLoanIdAmountMap.isEmpty()){
        for(Id newFacility:sfgLoanIdAmountMap.keyset()){
            CG_INT_BBAssistedRequestWrapper.Security security=new CG_INT_BBAssistedRequestWrapper.Security();  
            if(securitiesList.size()<=40){
                security.securityType = 'G2'; 
                security.existingSecurityIndicator ='N'; 
                security.value = new CG_INT_BBAssistedRequestWrapper.Amount(sfgLoanIdAmountMap.get(newFacility));
               
                securitiesList.add(security);
                }
        }
       }
        return securitiesList;
        
    }
    /**
*  Description    Method to get LLC_BI__Collateral__c details.
*  @name          getBbmDetails   
*  @param         No Parms
*  @return        CG_INT_BBAssistedRequestWrapper.BbmDetails
*  @throws exception No
*/
    public  CG_INT_BBAssistedRequestWrapper.BbmDetails getBbmDetails(){
        CG_INT_BBAssistedRequestWrapper.BbmDetails bbmDetails=new CG_INT_BBAssistedRequestWrapper.BbmDetails();
        User userInfo=[select id,User_Group__c from user where id=:UserInfo.getUserId()];
        bbmDetails.profileId=userInfo.User_Group__c;
        // seems group id 
        if(bbmDetails.profileId!=null)
            return bbmDetails;
        else{  mandatoryErrorList.add('BBM Profile Id is required  ');
             return null;}
    }
    /**
*  Description    Method to get Questionnaire record details.
*  @name          getQuestionnaire   
*  @param         Map<String,Object> questionMap
*  @return        List<CG_INT_BBAssistedRequestWrapper.Questionnaire>
*  @throws exception No
*/
    public  List<CG_INT_BBAssistedRequestWrapper.Questionnaire> getQuestionnaire(Map<String,Object> questionMap){
        //QI,ILC,SFG
        List<CG_INT_BBAssistedRequestWrapper.Questionnaire> questionList=new List<CG_INT_BBAssistedRequestWrapper.Questionnaire>();
        for(String singleQuestion: questionMap.keyset()){
            
            CG_INT_BBAssistedRequestWrapper.Questionnaire ilcQISFGQuestion=new CG_INT_BBAssistedRequestWrapper.Questionnaire();
            ilcQISFGQuestion.key=singleQuestion;
            ilcQISFGQuestion.value=CG_INT_Utility.getQuestionValue(questionMap.get(singleQuestion));
            questionList.add(ilcQISFGQuestion);
        }
        
        if(questionList.size()>0) return questionList;
        
        else return null;
    }
    /**
*  Description    Method to get Questionnaire record details.
*  @name          getConsultantDetails   
*  @param         No parms
*  @return        List<CG_INT_BBAssistedRequestWrapper.consultantDetails>
*  @throws exception No
*/    
    public  List<CG_INT_BBAssistedRequestWrapper.consultantDetails> getConsultantDetails(){
        List<CG_INT_BBAssistedRequestWrapper.consultantDetails> consultDetailsList=new List<CG_INT_BBAssistedRequestWrapper.consultantDetails>();
        
        // Broker detail
        if(creditApp.Broker_Introduced__c=='Yes'&&creditApp.Application_Purpose__c!='2A'){ //ATHN-1290
            if(creditApp.CG_BD_Organisation_Name__c==null){  mandatoryErrorList.add('Broker Organisation is required ');}
            else{
                CG_INT_BBAssistedRequestWrapper.consultantDetails bdDetails=new CG_INT_BBAssistedRequestWrapper.consultantDetails();
                bdDetails.profession='Broker';
                bdDetails.organisationName=creditApp.CG_BD_Organisation_Name__c;
                
                bdDetails.contactName=creditApp.CG_BD_Contact_Name__c;
                bdDetails.address=getElementedAddress(bdDetails.profession);
                bdDetails.telephone=getTelephoneValue(bdDetails.profession,null);
                consultDetailsList.add(bdDetails);
            }}
        //Solicitor details
        if(creditApp.CG_SD_Organisation_Name__c!=null){  
            
            CG_INT_BBAssistedRequestWrapper.consultantDetails sdDetails=new CG_INT_BBAssistedRequestWrapper.consultantDetails();
            sdDetails.profession='Solicitor';
            sdDetails.organisationName=creditApp.CG_SD_Organisation_Name__c;
            
            sdDetails.contactName=creditApp.CG_SD_Contact_Name__c;
            sdDetails.referenceNumber=creditApp.CG_SD_DX_Number__c;
            sdDetails.address=getElementedAddress(sdDetails.profession);
            sdDetails.telephone=getTelephoneValue(sdDetails.profession,null);
            consultDetailsList.add(sdDetails);
        }
        //Accountant details
        if(creditApp.CG_AD_Organisation_Name__c!=null){ 
            
            CG_INT_BBAssistedRequestWrapper.consultantDetails acDetails=new CG_INT_BBAssistedRequestWrapper.consultantDetails();
            acDetails.profession='Accountant';
            acDetails.organisationName=creditApp.CG_AD_Organisation_Name__c;
            acDetails.contactName=creditApp.CG_AD_Contact_Name__c;
            acDetails.address=getElementedAddress(acDetails.profession);
            acDetails.telephone=getTelephoneValue(acDetails.profession,null);
            consultDetailsList.add(acDetails);
        }
        if(consultDetailsList.size()>0)
            return consultDetailsList;
        else return null;
    }
    /**
*  Description    Method to get Questionnaire record details.
*  @name          getElementedAddress   
*  @param         String profession
*  @return        CG_INT_BBAssistedRequestWrapper.Address_Z
*  @throws exception No
*/    
    public CG_INT_BBAssistedRequestWrapper.Address_Z getElementedAddress(String profession){
        CG_INT_BBAssistedRequestWrapper.Address_Z address=new CG_INT_BBAssistedRequestWrapper.Address_Z();
        switch on profession {
            
            when 'Accountant' {
                address.flat=creditApp.CG_AD_Flat__c;
                address.houseNumber=creditApp.CG_AD_House_Number__c;
                address.houseName=creditApp.CG_AD_House_Name__c;
                address.street=creditApp.CG_AD_Street__c;
                address.town=creditApp.CG_AD_Town__c;
                address.district=creditApp.CG_AD_District__c;
                
                if(creditApp.CG_AD_Post_Code__c==null){  mandatoryErrorList.add('Accountant Address Post Code is required ');}
                address.postCode=creditApp.CG_AD_Post_Code__c;
            }
            when 'Broker' { // if is broker introduced check box is true then this is mandatory
                address.flat=creditApp.CG_BD_Flat__c;
                address.houseNumber=creditApp.CG_BD_House_Number__c;
                address.houseName=creditApp.CG_BD_House_Name__c;
                address.street=creditApp.CG_BD_Street__c;
                address.town=creditApp.CG_BD_Town__c;
                address.district=creditApp.CG_BD_District__c;
                // this is the County name API name is Country
                if(creditApp.CG_BD_Post_Code__c==null){  mandatoryErrorList.add('Broker Address Post Code is required ');}
                address.postCode=creditApp.CG_BD_Post_Code__c;
            }
            when 'Solicitor' {
                address.flat=creditApp.CG_SD_Flat__c;
                address.houseNumber=creditApp.CG_SD_House_Number__c;
                address.houseName=creditApp.CG_SD_House_Name__c;
                address.street=creditApp.CG_SD_Street__c;
                address.town=creditApp.CG_SD_Town__c;
                address.district=creditApp.CG_SD_District__c;
                // this is the County name API name is Country
                if(creditApp.CG_SD_Post_Code__c==null){  mandatoryErrorList.add('Solicitor Address Post Code is required ');}
                address.postCode=creditApp.CG_SD_Post_Code__c;
            }
        }
        return address;
    }
    /**
*  Description    Method to get telephone details.
*  @name          getTelephoneValue   
*  @param         String profession,String phoneNumber
*  @return        CG_INT_BBAssistedRequestWrapper.Telephone
*  @throws exception No
*/
    public CG_INT_BBAssistedRequestWrapper.Telephone getTelephoneValue(String profession,String phoneNumber){
        CG_INT_BBAssistedRequestWrapper.Telephone tel=new CG_INT_BBAssistedRequestWrapper.Telephone();
        switch on profession {
            when 'Accountant' {
                if(creditApp.CG_AD_Telephone_Type__c==null){  mandatoryErrorList.add('Accountant Telephone Type is required ');}
                tel.telephoneType=creditApp.CG_AD_Telephone_Type__c;
                if(creditApp.CG_AD_Telephone_Number__c==null){  mandatoryErrorList.add('Accountant Telephone Number is required ');}
                else {tel.telephoneNumber=(creditApp.CG_AD_Telephone_Number__c).replaceAll( '\\s+', '');}
            }
            when 'Broker' {
                if(creditApp.CG_BD_Telephone_Type__c==null){  mandatoryErrorList.add('Broker Telephone Type is required ');}
                tel.telephoneType=creditApp.CG_BD_Telephone_Type__c;
                if(creditApp.CG_BD_Telephone_Number__c==null){  mandatoryErrorList.add('Broker Telephone Number is required ');}
                else{ tel.telephoneNumber=(creditApp.CG_BD_Telephone_Number__c).replaceAll( '\\s+', '');}
            }
            when 'Solicitor' {
                if(creditApp.CG_SD_Telephone_Type__c==null){  mandatoryErrorList.add('Solicitor Telephone Type is required ');}
                tel.telephoneType=creditApp.CG_SD_Telephone_Type__c;
                if(creditApp.CG_SD_Telephone_Number__c==null){  mandatoryErrorList.add('Solicitor Telephone Number is required ');}
                else { tel.telephoneNumber=(creditApp.CG_SD_Telephone_Number__c).replaceAll( '\\s+', '');}
            }
            when 'BUS','HOM','MOB','WOR' {
                
                tel.telephoneType=profession;
                
                tel.telephoneNumber=phoneNumber.replaceAll( '\\s+', '');
            }
            
            
        }
        
        return tel;
        
    }
    /**
*  Description    Method to get Address type.
*  @name          getRdsAddressType   
*  @param         String type
*  @return        String
*  @throws exception No
*/
    public String getRdsAddressType(String type){
        String rdsAddressType;
        if(type=='U' || type=='N') rdsAddressType='U';
        else if(type=='A')rdsAddressType='B';
        else rdsAddressType='F';
        return rdsAddressType;
    }
    /**
*  Description    Method to get RD Residenstial Address status.
*  @name          getRdsResidentialStatus   
*  @param         String status
*  @return        String
*  @throws exception No
*/
    public String getRdsResidentialStatus(String status){
        String rdsStatus;
        
        if(status=='1') rdsStatus='1';
        else if(status=='2' )rdsStatus='2';
        else if(status=='3') rdsStatus='3';
        else if(status=='4') rdsStatus='4';
        else if(status=='5') rdsStatus='5';
        
        
        return rdsStatus;
        
    }
    /**
*  Description    Method to update decision details.
*  @name          persistDecisionDetails   
*  @param         String jsonMessage,String creditAppIdString status
*  @return        Map<String,String>
*  @throws exception yes
*/    
    
    public Map<String,String> persistDecisionDetails(String jsonMessage,String creditAppId){
        Map<String, String> processedAPIMap=new Map<String, String>();
        List<sObject> insertsObjectList=new List<sObject>();
        List<sObject> updatesObjectList=new List<sObject>();
        LLC_BI__Product_Package__c updateCA=new LLC_BI__Product_Package__c();
        CG_Decision_History__c upsertDecision=new CG_Decision_History__c();
        List<CG_Decision_History__c> decisionList =new List<CG_Decision_History__c>();
        List<LLC_BI__Loan__c> facList=new List<LLC_BI__Loan__c>();
        String jsonMsg=jsonMessage.replace('currency','currency_z');
        CG_INT_BBAssistedLendingResponseWrapper resWrapper=CG_INT_BBAssistedLendingResponseWrapper.parse(jsonMsg);
        List<CG_INT_BBAssistedLendingResponseWrapper.ProcessMessages> processMessages=resWrapper.data.attributes.processMessages;
        CG_INT_BBAssistedLendingResponseWrapper.ProcessResponse processResponse=resWrapper.data.attributes.processResponse;
        LLC_BI__Product_Package__c creditApp=[select id,Status__c,Auto_Decision_Counter__c,RWM_Proposed__c,RWM_Golden_Source__c,
                                              (Select Id,Name,LLC_BI__Amount__c, LLC_BI__Stage__c,LLC_BI__Product_Reference__c
                                               from LLC_BI__Loan_Facilities__r where LLC_BI__Stage__c!='Complete' and LLC_BI__Product_Reference__c!=null), 
                                              (select id from Decision_Histories__r) 
                                              from LLC_BI__Product_Package__c where Id=:creditAppId];
        if(creditApp!=null){
            updateCA.id=creditApp.id;
            updateCA.Date_of_Previous_Decision_Call__c=datetime.now();
            if(creditApp.status__c=='Pending')updateCA.status__c='Auto Decision';
            upsertDecision.Credit_Application__c=creditApp.id;
            decisionList=creditApp.Decision_Histories__r;
            facList= creditApp.LLC_BI__Loan_Facilities__r;
            if(creditApp.Auto_Decision_Counter__c!=null){
                updateCA.Auto_Decision_Counter__c=creditApp.Auto_Decision_Counter__c+1;
            }
            else {                updateCA.Auto_Decision_Counter__c=1;}
            updatesObjectList.add(updateCA);
            
        }
        
        
        if(decisionList.size()==1){
            upsertDecision.id=decisionList[0].id;
            updatesObjectList.add(upsertDecision);
        }
        else{
            insertsObjectList.add(upsertDecision);
        }
        if(facList.size()>0){
            for(LLC_BI__Loan__c loan:facList){
                if(loan.LLC_BI__Stage__c=='Proposal'){
                    LLC_BI__Loan__c updateLoan=new LLC_BI__Loan__c();
                    updateLoan.id=loan.id;
                    updateLoan.LLC_BI__Stage__c='Final Review';
                    updatesObjectList.add(updateLoan);
                }
                
            }
        }
        if(processResponse!=null){
            if(processResponse.applicationDecision!=null){
                upsertDecision.Auto_Decision_Overall__c=processResponse.applicationDecision;
            }
            if(processResponse.smOutput!=null){
                upsertDecision.Strategy_Manager_release_version_number__c = processResponse.smOutput.smReleaseNumber;
                upsertDecision.Strategy_Manager_release_version_date__c = processResponse.smOutput.smReleaseDate;
                upsertDecision.Business_data_available__c = processResponse.smOutput.batchBusnessBureau;
                upsertDecision.Personal_data_available__c = processResponse.smOutput.batchPersBureau;
                upsertDecision.Commercial_bureau_call_completed__c = processResponse.smOutput.liveSearchDataB;
                upsertDecision.Consumer_bureau_call_completed__c = processResponse.smOutput.liveSearchDataP;
                upsertDecision.Total_number_of_personal_CCJs__c = processResponse.smOutput.totNumCCJsPers;
                upsertDecision.Total_no_of_outstanding_personal_CCJs__c = processResponse.smOutput.totNumOSCCJsPers;
                upsertDecision.Total_value_of_personal_CCJs__c = processResponse.smOutput.totVCCJsPers;
                upsertDecision.Total_value_of_outstanding_personal_CCJs__c = processResponse.smOutput.totVOSCCJsPers;
                upsertDecision.Time_since_most_recent_personal_CCJs__c = processResponse.smOutput.tsmrCCJsPers;
                upsertDecision.Time_since_most_recent_OS_personal_CCJs__c = processResponse.smOutput.tsmrOSCCJsPers;
                upsertDecision.Total_value_of_personal_defaults__c = processResponse.smOutput.totValDefPers;
                upsertDecision.Total_number_of_personal_defaults__c = processResponse.smOutput.totNumDefPers;
                upsertDecision.Time_since_most_recent_personal_defaulft__c = processResponse.smOutput.tsmrDefPers;
                upsertDecision.Total_outstanding_balance_excl_mortgage__c = processResponse.smOutput.totOSBalExMtg;
                upsertDecision.Total_outstanding_mortgage_balance__c = processResponse.smOutput.totOSBalMtgOnly;
                upsertDecision.Repayment_excluding_mortgage__c = processResponse.smOutput.repayExMtg;
                upsertDecision.Repayment_including_mortgage__c = processResponse.smOutput.repayIncMtg;
                upsertDecision.New_young_or_mature_to_bank__c = processResponse.smOutput.segmentation;
                upsertDecision.Customer_CAIV_Profile_classification__c = processResponse.smOutput.caivProfile;
                upsertDecision.Probability_of_default__c = processResponse.smOutput.pdScore;
                upsertDecision.Annual_credit_turnover__c = processResponse.smOutput.annualCTO;
                upsertDecision.Bank_relationship_start_date__c = processResponse.smOutput.barclaysStartDate;
                upsertDecision.Commercial_Delphi_Score__c = processResponse.smOutput.commercialDelphiScore;
                upsertDecision.Delphi_Band__c = processResponse.smOutput.delphiBand;
                upsertDecision.Delphi_Failure_Odds__c = processResponse.smOutput.delphiFailureOdds;
                upsertDecision.Total_no_Comm_CCJs_12_months_old__c = processResponse.smOutput.numberCCJsLast12Months;
                upsertDecision.Total_no_Comm_CCJs_13_24_mts_old__c = processResponse.smOutput.numberCCJs13To24;
                upsertDecision.Total_NLTD_Comm_CCJs_6_years_old__c = processResponse.smOutput.nlBatchBureauNumberCCJs;
                upsertDecision.Total_Primary_Group_Exposure__c=processResponse.smOutput.TotPrimGroupExp;
                upsertDecision.SM_release_version_number_from_PCCM__c =CG_INT_Utility.getStringAsDecimal(processResponse.smOutput.pccmSMReleaseNumber);
                upsertDecision.SM_release_version_date_from_PCCM__c =processResponse.smOutput.pccmSMReleaseDate;
                upsertDecision.PCCM_run_date__c =processResponse.smOutput.pccmRunDate;
                upsertDecision.Segmentation_based_on_Risk_Grade__c =processResponse.smOutput.pccmSegmentation6;
                upsertDecision.Final_BPAL_limit_from_batch_PCCM__c =CG_INT_Utility.getStringAsDecimal(processResponse.smOutput.finalLimitBPAL);
                upsertDecision.SM_release_version_number_for_XR__c =processResponse.smOutput.xrSMReleaseNumber;
                upsertDecision.Segmentation_based_on_Risk_Grade_for_XR__c =processResponse.smOutput.xrSegmentation6;
                upsertDecision.SM_release_version_date_for_XR_products__c =processResponse.smOutput.xrSMReleaseDate;
                upsertDecision.Indicator_for_waterfall_Old_New__c =processResponse.smOutput.indicatorForWaterfall;
                upsertDecision.OD_BPAL_limit__c =processResponse.smOutput.odBpalLimit;
                upsertDecision.Total_unsecured_limit__c =processResponse.smOutput.totalUnsecuredLimit;
                upsertDecision.Banner_limit__c =processResponse.smOutput.bannerLimit;
            }
            
            
            
            if(processResponse.creditDecision!=null){
                
                upsertDecision.eBDR_reference__c = processResponse.creditDecision.consumerBureauId; // save this at DH to show onburea out pt screen
                upsertDecision.Credit_Decision_Date__c =CG_INT_Utility.getStringAsDateTime(processResponse.creditDecision.decisionDate);
                //Auto_Decision_Date_and_Time__c or Credit_Decision_Date__c
                upsertDecision.Auto_Decision_Credit__c =processResponse.creditDecision.decision; 
                updateCA.RDS_Credit_Decision__c=processResponse.creditDecision.decision;
                updateCA.Risk_Grade__c =processResponse.creditDecision.riskGrade;//Change as part of GRPCONLEND-22888
                //CA RDS field to be updated
                Integer cr=0,crc=0; // CreditPoliycRule,CreditConditionalPolicyRule
                if(processResponse.creditDecision.policyRules!=null){
                    upsertDecision.Reason_1_CR__c=null ; 
                    upsertDecision.Reason_2_CR__c=null ; 
                    upsertDecision.Reason_3_CR__c=null ; 
                    upsertDecision.Reason_4_CR__c=null ; 
                    upsertDecision.Reason_5_CR__c=null ; 
                    upsertDecision.Reason_6_CR__c=null ; 
                    upsertDecision.Reason_7_CR__c=null ; 
                    upsertDecision.Reason_8_CR__c=null ; 
                    upsertDecision.Reason_9_CR__c=null ; 
                    upsertDecision.Reason_10_CR__c=null ; 
                    upsertDecision.Reason_11_CR__c=null ; 
                    upsertDecision.Reason_12_CR__c=null ; 
                    upsertDecision.Reason_13_CR__c=null ; 
                    upsertDecision.Reason_14_CR__c=null ; 
                    upsertDecision.Reason_15_CR__c=null ; 
                    upsertDecision.Reason_16_CR__c=null ; 
                    upsertDecision.Reason_17_CR__c=null ; 
                    upsertDecision.Reason_18_CR__c=null ; 
                    upsertDecision.Reason_19_CR__c=null ; 
                    upsertDecision.Reason_20_CR__c=null ;
                    for(CG_INT_BBAssistedLendingResponseWrapper.PolicyRules reason:processResponse.creditDecision.policyRules){
                        // reason CR1 Code_description 
                        cr++;
                        if(cr==1){upsertDecision.Reason_1_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==2){upsertDecision.Reason_2_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==3){upsertDecision.Reason_3_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==4){upsertDecision.Reason_4_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==5){upsertDecision.Reason_5_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==6){upsertDecision.Reason_6_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==7){upsertDecision.Reason_7_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==8){upsertDecision.Reason_8_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==9){upsertDecision.Reason_9_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==10){upsertDecision.Reason_10_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==11){upsertDecision.Reason_11_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==12){upsertDecision.Reason_12_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==13){upsertDecision.Reason_13_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==14){upsertDecision.Reason_14_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==15){upsertDecision.Reason_15_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==16){upsertDecision.Reason_16_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==17){upsertDecision.Reason_17_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==18){upsertDecision.Reason_18_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==19){upsertDecision.Reason_19_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (cr==20){upsertDecision.Reason_20_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                    }}
                
                if(processResponse.creditDecision.conditionalPolicyRules!=null){
                    upsertDecision.Condition_1__c=null ; 
                    upsertDecision.Condition_2__c=null ; 
                    upsertDecision.Condition_3__c=null ; 
                    upsertDecision.Condition_4__c=null ; 
                    upsertDecision.Condition_5__c=null ; 
                    upsertDecision.Condition_6__c=null ; 
                    upsertDecision.Condition_7__c=null ; 
                    upsertDecision.Condition_8__c=null ; 
                    upsertDecision.Condition_9__c=null ; 
                    upsertDecision.Condition_10__c=null ; 
                    upsertDecision.Condition_11__c=null ; 
                    upsertDecision.Condition_12__c=null ; 
                    upsertDecision.Condition_13__c=null ; 
                    upsertDecision.Condition_14__c=null ; 
                    upsertDecision.Condition_15__c=null ; 
                    upsertDecision.Condition_16__c=null ; 
                    upsertDecision.Condition_17__c=null ; 
                    upsertDecision.Condition_18__c=null ; 
                    upsertDecision.Condition_19__c=null ; 
                    upsertDecision.Condition_20__c=null ; 
                    for(CG_INT_BBAssistedLendingResponseWrapper.PolicyRules reason:processResponse.creditDecision.conditionalPolicyRules){
                        // conditions 1 Code_description 
                        crc++;
                        if(crc==1){upsertDecision.Condition_1__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==2){upsertDecision.Condition_2__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==3){upsertDecision.Condition_3__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==4){upsertDecision.Condition_4__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==5){upsertDecision.Condition_5__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==6){upsertDecision.Condition_6__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==7){upsertDecision.Condition_7__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==8){upsertDecision.Condition_8__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==9){upsertDecision.Condition_9__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==10){upsertDecision.Condition_10__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==11){upsertDecision.Condition_11__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==12){upsertDecision.Condition_12__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==13){upsertDecision.Condition_13__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==14){upsertDecision.Condition_14__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==15){upsertDecision.Condition_15__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==16){upsertDecision.Condition_16__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==17){upsertDecision.Condition_17__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==18){upsertDecision.Condition_18__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==19){upsertDecision.Condition_19__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        else if (crc==20){upsertDecision.Condition_20__c=reason.ruleId+'_'+reason.ruleDescription;  }
                    } }  
                
            }
            if(processResponse.fraudDecision!=null){
                Integer fr=0;//Fraud Reason
                upsertDecision.Fraud_SystemId__c = processResponse.fraudDecision.fraudSystemId;
                upsertDecision.Auto_Decision_Central_Refer__c = processResponse.fraudDecision.decision;
                //CA RDS field to be updated
                updateCA.RDS_Fraud_Decision__c=processResponse.fraudDecision.decision;
                if(processResponse.fraudDecision.reasons!=null){
                    upsertDecision.Reason_1__c=null ; 
                    upsertDecision.Reason_2__c=null ; 
                    upsertDecision.Reason_3__c=null ; 
                    upsertDecision.Reason_4__c=null ; 
                    upsertDecision.Reason_5__c=null ; 
                    upsertDecision.Reason_6__c=null ; 
                    upsertDecision.Reason_7__c=null ; 
                    upsertDecision.Reason_8__c=null ; 
                    upsertDecision.Reason_9__c=null ; 
                    upsertDecision.Reason_10__c=null ; 
                    upsertDecision.Reason_11__c=null ; 
                    upsertDecision.Reason_12__c=null ; 
                    upsertDecision.Reason_13__c=null ; 
                    upsertDecision.Reason_14__c=null ; 
                    upsertDecision.Reason_15__c=null ; 
                    upsertDecision.Reason_16__c=null ; 
                    upsertDecision.Reason_17__c=null ; 
                    upsertDecision.Reason_18__c=null ; 
                    upsertDecision.Reason_19__c=null ; 
                    upsertDecision.Reason_20__c=null ; 
                    for(CG_INT_BBAssistedLendingResponseWrapper.Reasons reason:processResponse.fraudDecision.reasons){
                        // reason 1 Code_description 
                        fr++;
                        if(fr==1){upsertDecision.Reason_1__c=reason.code+'_'+reason.description; }
                        else if (fr==2){upsertDecision.Reason_2__c=reason.code+'_'+reason.description; }
                        else if (fr==3){upsertDecision.Reason_3__c=reason.code+'_'+reason.description; }
                        else if (fr==4){upsertDecision.Reason_4__c=reason.code+'_'+reason.description;  }
                        else if (fr==5){upsertDecision.Reason_5__c=reason.code+'_'+reason.description;  }
                        else if (fr==6){upsertDecision.Reason_6__c=reason.code+'_'+reason.description;  }
                        else if (fr==7){upsertDecision.Reason_7__c=reason.code+'_'+reason.description;  }
                        else if (fr==8){upsertDecision.Reason_8__c=reason.code+'_'+reason.description;  }
                        else if (fr==9){upsertDecision.Reason_9__c=reason.code+'_'+reason.description;  }
                        else if (fr==10){upsertDecision.Reason_10__c=reason.code+'_'+reason.description;  }
                        else if (fr==11){upsertDecision.Reason_11__c=reason.code+'_'+reason.description;  }
                        else if (fr==12){upsertDecision.Reason_12__c=reason.code+'_'+reason.description;  }
                        else if (fr==13){upsertDecision.Reason_13__c=reason.code+'_'+reason.description;  }
                        else if (fr==14){upsertDecision.Reason_14__c=reason.code+'_'+reason.description;  }
                        else if (fr==15){upsertDecision.Reason_15__c=reason.code+'_'+reason.description;  }
                        else if (fr==16){upsertDecision.Reason_16__c=reason.code+'_'+reason.description;  }
                        else if (fr==17){upsertDecision.Reason_17__c=reason.code+'_'+reason.description;  }
                        else if (fr==18){upsertDecision.Reason_18__c=reason.code+'_'+reason.description;  }
                        else if (fr==19){upsertDecision.Reason_19__c=reason.code+'_'+reason.description;  }
                        else if (fr==20){upsertDecision.Reason_20__c=reason.code+'_'+reason.description;  }
                    }}
                
                
            }
            
        }
        try{
            if(updatesObjectList.size()>0)
            {  updatesObjectList.sort();
             update updatesObjectList;
            }
            if(insertsObjectList.size()>0){
                insertsObjectList.sort();
                insert insertsObjectList;
            }
            processedAPIMap.put('success','Decision Details Retrieved Successfully');
            return processedAPIMap;
        }
        catch(Exception e){
            processedAPIMap.put('error',e.getMessage());
            return processedAPIMap;
        }
    }
    /**
*  Description    Method to update pricing details.
*  @name          persistPricingDetails   
*  @param         String jsonMessage,String creditAppId,String btCode,String legalStatus
*  @return        Map<String,String>
*  @throws exception yes
*/    
    public Map<String,String> persistPricingDetails(String jsonMessage,String creditAppId,String btCode,String legalStatus){
        Map<String, String> processedAPIMap=new Map<String, String>();
        List<sObject> insertsObjectList=new List<sObject>();
        List<sObject> updatesObjectList=new List<sObject>();
        List<LLC_BI__Pricing_Option__c> pricingList=new List<LLC_BI__Pricing_Option__c>();
        List<LLC_BI__Fee__c> feeList=new List<LLC_BI__Fee__c>();
        List<CG_Decision_History__c> decisionList=new List<CG_Decision_History__c>();
        Map<String,LLC_BI__Pricing_Option__c> facilityPricingMap=new Map<String,LLC_BI__Pricing_Option__c>();
        Map<String,LLC_BI__Fee__c> facilityFeeMap=new Map<String,LLC_BI__Fee__c>();
        Map<String,LLC_BI__Pricing_Option__c> modFacilityPricingMap=new Map<String,LLC_BI__Pricing_Option__c>();
        Map<String,LLC_BI__Fee__c> modFacilityFeeMap=new Map<String,LLC_BI__Fee__c>();
        LLC_BI__Product_Package__c updateCA=new LLC_BI__Product_Package__c();
        CG_Decision_History__c upsertDecision=new CG_Decision_History__c();
        List<LLC_BI__Loan__c> facList=new List<LLC_BI__Loan__c>();
        Map<Id,String> facilityMap=new Map<Id,String>();
        String pricingComments;
        String jsonMsg=jsonMessage.replace('currency','currency_z');
        CG_INT_BBAssistedLendingResponseWrapper resWrapper=CG_INT_BBAssistedLendingResponseWrapper.parse(jsonMsg);
        List<CG_INT_BBAssistedLendingResponseWrapper.ProcessMessages> processMessages=resWrapper.data.attributes.processMessages;
        CG_INT_BBAssistedLendingResponseWrapper.ProcessResponse processResponse=resWrapper.data.attributes.processResponse;
        //added where clause for Pricing and Fee child records with CA purpose!=5A as fix for GRPCONLEND-22471
        LLC_BI__Product_Package__c creditApp=[select id,BusinessTargetterID__c,LegalStatus__c,Risk_Grade__c,appRepCountPricing__c,Status__c,rePricingRequired__c,ATH_Severity__c,
                                              (Select id, LLC_BI__Loan__c ,LLC_BI__Loan__r.LLC_BI__Product_Type__c,LLC_BI__Loan__r.LLC_BI__Product__c,LLC_BI__Loan__r.LLC_BI__Is_Modification__c   from Pricing_Options_PP__r where Product_Package__r.Application_Purpose__c != '5A'),
                                              (Select id,name,LLC_BI__Stage__c from LLC_BI__Loan_Facilities__r where LLC_BI__Stage__c!='Complete'),
                                              (select id,LLC_BI__Loan__c,LLC_BI__Loan__r.LLC_BI__Product_Type__c,LLC_BI__Loan__r.LLC_BI__Product__c,LLC_BI__Loan__r.LLC_BI__Is_Modification__c   from Fees_PP__r where Product_Package__r.Application_Purpose__c != '5A'),
                                              (select id from Decision_Histories__r) 
                                              from LLC_BI__Product_Package__c where Id=:creditAppId];
        if(creditApp!=null){
            updateCA.id=creditApp.id;
            updateCA.Date_of_Previous_Pricing_Call__c=datetime.now();
            if(creditApp.BusinessTargetterID__c==null&&btCode!=null&&btCode!='Yes')
                updateCA.BusinessTargetterID__c=btCode;
            if(creditApp.LegalStatus__c==null&&legalStatus!=null&&legalStatus!='Yes')
                updateCA.LegalStatus__c=legalStatus; 
            if(creditApp.rePricingRequired__c) updateCA.rePricingRequired__c=false;
            upsertDecision.Credit_Application__c=creditApp.id;
            facList= creditApp.LLC_BI__Loan_Facilities__r;
            pricingList=creditApp.Pricing_Options_PP__r;
            feeList=creditApp.Fees_PP__r;
            decisionList=creditApp.Decision_Histories__r;
            if(creditApp.appRepCountPricing__c!=null){
                updateCA.appRepCountPricing__c=creditApp.appRepCountPricing__c+1;
            }
            else                 updateCA.appRepCountPricing__c=1;
            updatesObjectList.add(updateCA);
            
        }
        for(LLC_BI__Loan__c loan:facList){
            facilityMap.put(loan.Id,loan.LLC_BI__Stage__c);
        }
        for(LLC_BI__Pricing_Option__c po:pricingList){
            facilityPricingMap.put(po.LLC_BI__Loan__c,po);
            if(!(po.LLC_BI__Loan__r.LLC_BI__Is_Modification__c==true&&(po.LLC_BI__Loan__r.LLC_BI__Product_Type__c=='Loan'||po.LLC_BI__Loan__r.LLC_BI__Product_Type__c=='Specialist Loan'))){
                modFacilityPricingMap.put(po.LLC_BI__Loan__c,po);
            }
        }
        for(LLC_BI__Fee__c fee:feeList){
            facilityFeeMap.put(fee.LLC_BI__Loan__c,fee);
            if(!(fee.LLC_BI__Loan__r.LLC_BI__Is_Modification__c==true&&(fee.LLC_BI__Loan__r.LLC_BI__Product_Type__c=='Loan'||fee.LLC_BI__Loan__r.LLC_BI__Product_Type__c=='Specialist Loan'))){
                modFacilityFeeMap.put(fee.LLC_BI__Loan__c,fee);
            }
        }
        
        
        if(decisionList.size()==1){
            upsertDecision.id=decisionList[0].id;
            updatesObjectList.add(upsertDecision);
        }
        else{
            insertsObjectList.add(upsertDecision);
        }
        
        
        if(processResponse!=null){
            
            updateCA.Decision_System_ID__c=processResponse.decisionSystemId;
            if(processResponse.smOutput!=null){
                upsertDecision.Strategy_Manager_release_version_number__c = processResponse.smOutput.smReleaseNumber;
                upsertDecision.Strategy_Manager_release_version_date__c = processResponse.smOutput.smReleaseDate;
                upsertDecision.Business_data_available__c = processResponse.smOutput.batchBusnessBureau;
                upsertDecision.Personal_data_available__c = processResponse.smOutput.batchPersBureau;
                upsertDecision.Commercial_bureau_call_completed__c = processResponse.smOutput.liveSearchDataB;
                upsertDecision.Consumer_bureau_call_completed__c = processResponse.smOutput.liveSearchDataP;
                upsertDecision.Total_number_of_personal_CCJs__c = processResponse.smOutput.totNumCCJsPers;
                upsertDecision.Total_no_of_outstanding_personal_CCJs__c = processResponse.smOutput.totNumOSCCJsPers;
                upsertDecision.Total_value_of_personal_CCJs__c = processResponse.smOutput.totVCCJsPers;
                upsertDecision.Total_value_of_outstanding_personal_CCJs__c = processResponse.smOutput.totVOSCCJsPers;
                upsertDecision.Time_since_most_recent_personal_CCJs__c = processResponse.smOutput.tsmrCCJsPers;
                upsertDecision.Time_since_most_recent_OS_personal_CCJs__c = processResponse.smOutput.tsmrOSCCJsPers;
                upsertDecision.Total_value_of_personal_defaults__c = processResponse.smOutput.totValDefPers;
                upsertDecision.Total_number_of_personal_defaults__c = processResponse.smOutput.totNumDefPers;
                upsertDecision.Time_since_most_recent_personal_defaulft__c = processResponse.smOutput.tsmrDefPers;
                upsertDecision.Total_outstanding_balance_excl_mortgage__c = processResponse.smOutput.totOSBalExMtg;
                upsertDecision.Total_outstanding_mortgage_balance__c = processResponse.smOutput.totOSBalMtgOnly;
                upsertDecision.Repayment_excluding_mortgage__c = processResponse.smOutput.repayExMtg;
                upsertDecision.Repayment_including_mortgage__c = processResponse.smOutput.repayIncMtg;
                upsertDecision.New_young_or_mature_to_bank__c = processResponse.smOutput.segmentation;
                upsertDecision.Customer_CAIV_Profile_classification__c = processResponse.smOutput.caivProfile;
                upsertDecision.Probability_of_default__c = processResponse.smOutput.pdScore;
                upsertDecision.Annual_credit_turnover__c = processResponse.smOutput.annualCTO;
                upsertDecision.Bank_relationship_start_date__c = processResponse.smOutput.barclaysStartDate;
                upsertDecision.Commercial_Delphi_Score__c = processResponse.smOutput.commercialDelphiScore;
                upsertDecision.Delphi_Band__c = processResponse.smOutput.delphiBand;
                upsertDecision.Delphi_Failure_Odds__c = processResponse.smOutput.delphiFailureOdds;
                upsertDecision.Total_no_Comm_CCJs_12_months_old__c = processResponse.smOutput.numberCCJsLast12Months;
                upsertDecision.Total_no_Comm_CCJs_13_24_mts_old__c = processResponse.smOutput.numberCCJs13To24;
                upsertDecision.Total_NLTD_Comm_CCJs_6_years_old__c = processResponse.smOutput.nlBatchBureauNumberCCJs;
                upsertDecision.Total_Primary_Group_Exposure__c = processResponse.smOutput.TotPrimGroupExp;
                upsertDecision.SM_release_version_number_from_PCCM__c =CG_INT_Utility.getStringAsDecimal(processResponse.smOutput.pccmSMReleaseNumber);
                upsertDecision.SM_release_version_date_from_PCCM__c =processResponse.smOutput.pccmSMReleaseDate;
                upsertDecision.PCCM_run_date__c =processResponse.smOutput.pccmRunDate;
                upsertDecision.Segmentation_based_on_Risk_Grade__c =processResponse.smOutput.pccmSegmentation6;
                upsertDecision.Final_BPAL_limit_from_batch_PCCM__c =CG_INT_Utility.getStringAsDecimal(processResponse.smOutput.finalLimitBPAL);
                upsertDecision.SM_release_version_number_for_XR__c =processResponse.smOutput.xrSMReleaseNumber;
                upsertDecision.Segmentation_based_on_Risk_Grade_for_XR__c =processResponse.smOutput.xrSegmentation6;
                upsertDecision.SM_release_version_date_for_XR_products__c =processResponse.smOutput.xrSMReleaseDate;
                upsertDecision.Indicator_for_waterfall_Old_New__c =processResponse.smOutput.indicatorForWaterfall;
                upsertDecision.OD_BPAL_limit__c =processResponse.smOutput.odBpalLimit;
                upsertDecision.Total_unsecured_limit__c =processResponse.smOutput.totalUnsecuredLimit;
                upsertDecision.Banner_limit__c =processResponse.smOutput.bannerLimit;
            }
            
            if(processResponse.decisionInfo!=null){
                updateCA.ATH_Severity__c=CG_INT_Utility.getStringAsDecimal(processResponse.decisionInfo.severity); // GRPCONLEND-22314 as per severity  this need to be captured at CA leveld
                
                // Decision Histry  to display
                //check with Shilpa as this is not created on Decision Histry Object
                pricingComments=CG_INT_Utility.getListAsString(processResponse.decisionInfo.systemPricingComments,false);
                if(processResponse.decisionInfo.creditDecision!=null){
                    
                    upsertDecision.eBDR_reference__c = processResponse.decisionInfo.creditDecision.consumerBureauId; 
                    
                    upsertDecision.Credit_Decision_Date__c =CG_INT_Utility.getStringAsDateTime(processResponse.decisionInfo.creditDecision.decisionDate);
                    //Credit_Decision_Date__c or Auto_Decision_Date_and_Time__c
                    upsertDecision.Auto_Decision_Credit__c =processResponse.decisionInfo.creditDecision.decision; 
                    updateCA.RDS_Credit_Decision__c=processResponse.decisionInfo.creditDecision.decision; 
                    //Changes implemeted as part of GRPCONLEND-22888
                     if(processResponse.decisionInfo.creditDecision.riskGrade!=null){
                     updateCA.Risk_Grade__c =processResponse.decisionInfo.creditDecision.riskGrade;
                     }
                    //CA RDS field to be updated
                    Integer cr=0; // CreditPoliycRule
                    if(processResponse.decisionInfo.creditDecision.policyRules!=null){
                        upsertDecision.Reason_1_CR__c=null ; 
                        upsertDecision.Reason_2_CR__c=null ; 
                        upsertDecision.Reason_3_CR__c=null ; 
                        upsertDecision.Reason_4_CR__c=null ; 
                        upsertDecision.Reason_5_CR__c=null ; 
                        upsertDecision.Reason_6_CR__c=null ; 
                        upsertDecision.Reason_7_CR__c=null ; 
                        upsertDecision.Reason_8_CR__c=null ; 
                        upsertDecision.Reason_9_CR__c=null ; 
                        upsertDecision.Reason_10_CR__c=null ; 
                        upsertDecision.Reason_11_CR__c=null ; 
                        upsertDecision.Reason_12_CR__c=null ; 
                        upsertDecision.Reason_13_CR__c=null ; 
                        upsertDecision.Reason_14_CR__c=null ; 
                        upsertDecision.Reason_15_CR__c=null ; 
                        upsertDecision.Reason_16_CR__c=null ; 
                        upsertDecision.Reason_17_CR__c=null ; 
                        upsertDecision.Reason_18_CR__c=null ; 
                        upsertDecision.Reason_19_CR__c=null ; 
                        upsertDecision.Reason_20_CR__c=null ;
                        for(CG_INT_BBAssistedLendingResponseWrapper.PolicyRules reason:processResponse.decisionInfo.creditDecision.policyRules){
                            // reason CR1 Code_description 
                            cr++;
                            if(cr==1){upsertDecision.Reason_1_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==2){upsertDecision.Reason_2_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==3){upsertDecision.Reason_3_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==4){upsertDecision.Reason_4_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==5){upsertDecision.Reason_5_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==6){upsertDecision.Reason_6_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==7){upsertDecision.Reason_7_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==8){upsertDecision.Reason_8_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==9){upsertDecision.Reason_9_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==10){upsertDecision.Reason_10_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==11){upsertDecision.Reason_11_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==12){upsertDecision.Reason_12_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==13){upsertDecision.Reason_13_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==14){upsertDecision.Reason_14_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==15){upsertDecision.Reason_15_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==16){upsertDecision.Reason_16_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==17){upsertDecision.Reason_17_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==18){upsertDecision.Reason_18_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==19){upsertDecision.Reason_19_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                            else if (cr==20){upsertDecision.Reason_20_CR__c=reason.ruleId+'_'+reason.ruleDescription;  }
                        }
                    }
                    
                    
                }
                if(processResponse.decisionInfo.quoteDetails!=null)  { 
                    for(CG_INT_BBAssistedLendingResponseWrapper.QuoteDetails quoteDetails:processResponse.decisionInfo.quoteDetails){
                        if(quoteDetails.facilitydetailId!=null&&facilityMap.containsKey(quoteDetails.facilitydetailId)){
                            
                            LLC_BI__Loan__c loan=new LLC_BI__Loan__c();
                            loan.id= quoteDetails.facilitydetailId;
                            if(facilityPricingMap.containsKey(quoteDetails.facilitydetailId)){
                                LLC_BI__Pricing_Option__c po=new LLC_BI__Pricing_Option__c();
                                po.id=facilityPricingMap.get(quoteDetails.facilitydetailId).id;
                                po.Severity__c=CG_INT_Utility.getStringAsDecimal(processResponse.decisionInfo.severity);
                                LLC_BI__Fee__c fee=new LLC_BI__Fee__c();
                                fee.id=facilityFeeMap.get(quoteDetails.facilitydetailId).id;
                                // start the mapping
                                po.Default_Pricing_Comments__c=pricingComments;
                                if(quoteDetails.pricingDetails!=null&&modFacilityPricingMap.containsKey(quoteDetails.facilitydetailId)){
                                    po.Margin_Rate__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.overallRate);
                                    fee.Product_Fee__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.totalFeeValue);
                                    //floormargin
                                    po.Discretion_Margin_Rate__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.overallRate);
                                    fee.Discretion_Product_Fee__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.totalFeeValue);
                                    po.Fixed_Rate_Cost_of_Funds__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.costOfFunds);
                                    po.Base_Rate__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.boeRate);
                                    po.Total_Rate__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.pricingDetails.totalRate);
                                    
                                }
                                
                                    if(quoteDetails.repaymentProfile!=null && quoteDetails.repaymentProfile.loanRepaymentDetails!=null){
                                        po.LLC_BI__APR__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.repaymentProfile.loanRepaymentDetails.annualPercentageRate);
                                        po.First_Repayment_Date__c=CG_INT_Utility.getStringAsDate(quoteDetails.repaymentProfile.loanRepaymentDetails.firstPayDate);
                                        if(quoteDetails.repaymentProfile.loanRepaymentDetails.balloonRepayAmount!=null)
                                            po.Balloon_Repayment_Amount__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.repaymentProfile.loanRepaymentDetails.balloonRepayAmount.amount);
                                        if(quoteDetails.repaymentProfile.loanRepaymentDetails.totalAmountPayable!=null)
                                            po.TotalRepayment_Amount__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.repaymentProfile.loanRepaymentDetails.totalAmountPayable.amount);
                                        if(quoteDetails.repaymentProfile.loanRepaymentDetails.repaymentAmount!=null) 
                                            
                                            po.Repayment_Amount__c=CG_INT_Utility.getStringAsDecimal(quoteDetails.repaymentProfile.loanRepaymentDetails.repaymentAmount.amount);
                                        
                                    }
                                  
                                
                                
                                updatesObjectList.add(po);
                                updatesObjectList.add(fee);
                            } updatesObjectList.add(loan); }  
                        
                    }
                }
            }
            
        }
        try{
            if(updatesObjectList.size()>0)
            {  updatesObjectList.sort();
             update updatesObjectList;
            }
            if(insertsObjectList.size()>0){
                insertsObjectList.sort();
                insert insertsObjectList;
            }
            processedAPIMap.put('success','Pricing Details Retrieved Successfully');
            return processedAPIMap;
        }
        catch(Exception e){
            processedAPIMap.put('error',e.getMessage());
            return processedAPIMap;
        }
        
    }
  
     private List<CG_INT_BBAssistedRequestWrapper.Address> getSortedAddressList(List<CG_INT_BBAssistedRequestWrapper.Address> addList){
        
        List<CG_INT_BBAssistedRequestWrapper.Address> sortedAddList=new List<CG_INT_BBAssistedRequestWrapper.Address>();
        Boolean isNextAddressRequried=false;
        for(Integer i=0;i<addList.size();i++){
            
            if(sortedAddList.isEmpty()){
                sortedAddList.add(addList[i]);
                
            }
            else if(isNextAddressRequried){
                
                sortedAddList.add(addList[i]);
            }
            
            
            if(date.today()<Date.valueOf(addList[i].addressStartDate).addYears(3)){
                isNextAddressRequried=true;
                
            }
            else{
                isNextAddressRequried=false;
                break; //GRPCONLEND-24004
            }
        }
         
        return sortedAddList;
    }
     public string  getLegalStatusFromBTA(String creditAppId){
        // to converted to reference table
        Map<String,String> btaLegalStatusMap=new  Map<String,String>{'07'=>'L',
                                                        '20'=>'L',
                                                        '71'=>'L',
                                                        '72'=>'L',
                                                        '01'=>'N',
                                                        '02'=>'N',
                                                        '03'=>'N',
                                                        '04'=>'N',
                                                        '05'=>'N',
                                                        '06'=>'N',
                                                        '10'=>'N',
                                                        '12'=>'N',
                                                        '13'=>'N',
                                                        '14'=>'N',
                                                        '15'=>'N',
                                                        '16'=>'N',
                                                        '19'=>'N',
                                                        '51'=>'N',
                                                        '52'=>'N',
                                                        '55'=>'N',
                                                        '81'=>'N',
                                                        '82'=>'N',
                                                        '83'=>'N',
                                                        '84'=>'N',
                                                        '85'=>'N',
                                                        '99'=>'N'};
        LLC_BI__Product_Package__c creditApp=[select id,LLC_BI__Account__c,LLC_BI__Account__r.BTA_Code__c from LLC_BI__Product_Package__c where id=:creditAppId ];        
        if(creditApp!=null&&creditApp.LLC_BI__Account__r.BTA_Code__c!=null&&btaLegalStatusMap.containsKey(creditApp.LLC_BI__Account__r.BTA_Code__c)){
          return   btaLegalStatusMap.get(creditApp.LLC_BI__Account__r.BTA_Code__c);
        }
        else{
            return null;
        }
    }
    //Sonar Fixes BUKBBSF-25872
    public CG_INT_BBAssistedRequestWrapper.Facilities mapFacilityDetails(CG_INT_BBAssistedRequestWrapper.Facilities newFacilty, LLC_BI__Loan__c singleFac){
        newFacilty.pricingProductGroup  =singleFac.LLC_BI__Product_Reference__r.Product_Grouping__c;              
        newFacilty.productLine =singleFac.LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.LLC_BI__Product_Line__r.Product_Line_Code__c;     
        if(newFacilty.productLine==null){mandatoryErrorList.add('Product Line is required for '+singleFac.Name);}
        newFacilty.productType =singleFac.LLC_BI__Product_Reference__r.LLC_BI__Product_Type__r.Product_Type_Code__c;
        if(newFacilty.productType==null){mandatoryErrorList.add('Product Type is required for '+singleFac.Name);}
        newFacilty.productCode =singleFac.LLC_BI__Product_Reference__r.Product_Code__c;
        if(newFacilty.productCode==null){mandatoryErrorList.add('Product Code is required for '+singleFac.Name);}
        newFacilty.securedFlag =(singleFac.LLC_BI__Is_Secured__c?'Y':'N');
        newFacilty.overlayType =singleFac.LLC_BI__Product_Reference__r.Overlay_Type__c;
        newFacilty.term =singleFac.LLC_BI__Term_Months__c;
        return newFacilty;        
}
}